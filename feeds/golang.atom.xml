<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>startover's blog</title><link href="http://startover.github.io/" rel="alternate"></link><link href="http://startover.github.io/feeds/golang.atom.xml" rel="self"></link><id>http://startover.github.io/</id><updated>2016-08-22T16:10:00+08:00</updated><entry><title>Python 程序员的 Golang 学习指南（II）: 开发环境搭建</title><link href="http://startover.github.io/articles/2016/08/22/golang-for-pythonistas-environment/" rel="alternate"></link><published>2016-08-22T16:10:00+08:00</published><author><name>startover</name></author><id>tag:startover.github.io,2016-08-22:articles/2016/08/22/golang-for-pythonistas-environment/</id><summary type="html">&lt;p&gt;&lt;a href="http://startover.github.io/articles/2016/08/15/golang-for-pythonistas/"&gt;上一篇文章&lt;/a&gt;我们已经对 Golang 有了初步的了解，这篇主要介绍如何在 Ubuntu 14.04 上搭建 Golang 开发环境。&lt;/p&gt;
&lt;h2&gt;安装 Golang&lt;/h2&gt;
&lt;p&gt;这里就按照&lt;a href="https://golang.org/doc/install#install"&gt;官方文档&lt;/a&gt;进行安装即可，如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载并解压安装包到指定目录&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget https://storage.googleapis.com/golang/go1.6.3.linux-amd64.tar.gz
$ tar -C /usr/local -xzf go1.6.3.linux-amd64.tar.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;设置 PATH&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;export PATH=&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;:/usr/local/go/bin&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc
$ &lt;span class="nb"&gt;source&lt;/span&gt; ~/.bashrc
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;验证安装&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go version
go version go1.6.3 linux/amd64
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;环境变量设置&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;export GOROOT=/usr/local/go&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;export GOPATH=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/go&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc
$ &lt;span class="nb"&gt;source&lt;/span&gt; ~/.bashrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中，GOROOT 为 Golang 的安装目录，只有当 Golang 安装到除 /usr/local 之外的路径时需要设置，反之则不用设置，GOPATH 是 Golang 的开发目录，详细可参考&lt;a href="https://golang.org/cmd/go/#hdr-GOPATH_environment_variable"&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;开发工具&lt;/h2&gt;
&lt;p&gt;工欲善其事，必先利其器，作为一名伪 VIMer，这里主要介绍下如何在 Vim 下配置 Golang 开发环境。&lt;/p&gt;
&lt;p&gt;由于之前一直使用 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 作为 Python 开发环境，而 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 已经集成了当前使用最为广泛的用于搭建 Golang 开发环境的 vim 插件 &lt;a href="https://github.com/fatih/vim-go"&gt;vim-go&lt;/a&gt;，只是默认没有开启，需要我们手动进行相关设置。 &lt;/p&gt;
&lt;p&gt;在 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 中开启 Golang 语言的支持，非常简单，如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改 ~/.vimrc.bundles（开启 golang 支持，并修改 vim-go 的默认配置，增加快捷键配置等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;let&lt;/span&gt; g:bundle_groups&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;javascript&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;markdown&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;html&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;css&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;tmux&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;beta&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;golang&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="s2"&gt;&amp;quot; vimgo {{{&lt;/span&gt;
&lt;span class="s2"&gt;    let g:go_highlight_functions = 1&lt;/span&gt;
&lt;span class="s2"&gt;    let g:go_highlight_methods = 1&lt;/span&gt;
&lt;span class="s2"&gt;    let g:go_highlight_structs = 1&lt;/span&gt;
&lt;span class="s2"&gt;    let g:go_highlight_operators = 1&lt;/span&gt;
&lt;span class="s2"&gt;    let g:go_highlight_build_constraints = 1&lt;/span&gt;

&lt;span class="s2"&gt;    let g:go_fmt_fail_silently = 1&lt;/span&gt;
&lt;span class="s2"&gt;    let g:go_fmt_command = &amp;quot;&lt;/span&gt;goimports&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;    let g:syntastic_go_checkers = [&amp;#39;golint&amp;#39;, &amp;#39;govet&amp;#39;, &amp;#39;errcheck&amp;#39;]&lt;/span&gt;

&lt;span class="s2"&gt;    &amp;quot;&lt;/span&gt; vim-go custom mappings
    au FileType go nmap &amp;lt;Leader&amp;gt;s &amp;lt;Plug&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;go-implements&lt;span class="o"&gt;)&lt;/span&gt;
    au FileType go nmap &amp;lt;Leader&amp;gt;i &amp;lt;Plug&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;go-info&lt;span class="o"&gt;)&lt;/span&gt;
    au FileType go nmap &amp;lt;Leader&amp;gt;gd &amp;lt;Plug&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;go-doc&lt;span class="o"&gt;)&lt;/span&gt;
    au FileType go nmap &amp;lt;Leader&amp;gt;gv &amp;lt;Plug&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;go-doc-vertical&lt;span class="o"&gt;)&lt;/span&gt;
    au FileType go nmap &amp;lt;leader&amp;gt;r &amp;lt;Plug&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;go-run&lt;span class="o"&gt;)&lt;/span&gt;
    au FileType go nmap &amp;lt;leader&amp;gt;b &amp;lt;Plug&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;go-build&lt;span class="o"&gt;)&lt;/span&gt;
    au FileType go nmap &amp;lt;leader&amp;gt;t &amp;lt;Plug&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;go-test&lt;span class="o"&gt;)&lt;/span&gt;
    au FileType go nmap &amp;lt;leader&amp;gt;c &amp;lt;Plug&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;go-coverage&lt;span class="o"&gt;)&lt;/span&gt;
    au FileType go nmap &amp;lt;Leader&amp;gt;ds &amp;lt;Plug&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;go-def-split&lt;span class="o"&gt;)&lt;/span&gt;
    au FileType go nmap &amp;lt;Leader&amp;gt;dv &amp;lt;Plug&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;go-def-vertical&lt;span class="o"&gt;)&lt;/span&gt;
    au FileType go nmap &amp;lt;Leader&amp;gt;dt &amp;lt;Plug&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;go-def-tab&lt;span class="o"&gt;)&lt;/span&gt;
    au FileType go nmap &amp;lt;Leader&amp;gt;e &amp;lt;Plug&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;go-rename&lt;span class="o"&gt;)&lt;/span&gt;
    au FileType go nnoremap &amp;lt;leader&amp;gt;gr :GoRun %&amp;lt;CR&amp;gt;
&lt;span class="s2"&gt;&amp;quot; }}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 Vim 内执行 &lt;code&gt;:PlugInstall&lt;/code&gt;，安装 &lt;a href="https://github.com/fatih/vim-go"&gt;vim-go&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 Vim 内执行 &lt;code&gt;:GoInstallBinaries&lt;/code&gt;，下载并安装 &lt;a href="https://github.com/fatih/vim-go"&gt;vim-go&lt;/a&gt; 依赖的二进制工具，&lt;code&gt;goimports&lt;/code&gt;，&lt;code&gt;golint&lt;/code&gt; 等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装 &lt;a href="https://github.com/jstemmer/gotags"&gt;gotags&lt;/a&gt;，使 &lt;code&gt;tagbar&lt;/code&gt; 配置生效。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go get -u github.com/jstemmer/gotags
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们来看一下最终效果：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Image of Golang Environment in Vim" src="http://startover.github.io/images/golang-for-pythonistas-environment.png" /&gt;&lt;/p&gt;
&lt;h2&gt;编写第一个程序&lt;/h2&gt;
&lt;p&gt;进入工作目录，新建文件 &lt;code&gt;hello.go&lt;/code&gt;，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;GOPATH&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;
&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, World！&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行程序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go run hello.go
Hello, World！
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Golang"></category><category term="Python"></category></entry><entry><title>Python 程序员的 Golang 学习指南（I）: Go 之初体验</title><link href="http://startover.github.io/articles/2016/08/15/golang-for-pythonistas/" rel="alternate"></link><published>2016-08-15T12:00:00+08:00</published><author><name>startover</name></author><id>tag:startover.github.io,2016-08-15:articles/2016/08/15/golang-for-pythonistas/</id><summary type="html">&lt;h2&gt;Go 语言简介&lt;/h2&gt;
&lt;p&gt;Go，又称 golang，是 Google 开发的一种静态强类型，编译型，并发型，并具有垃圾回收功能的编程语言。&lt;/p&gt;
&lt;p&gt;Go 语言于2009年11月正式宣布推出，自2012年发布1.0，最新稳定版1.7。目前，Go的相关工具和生态已逐渐趋于完善，也不乏重量级项目，如 Docker, Kubernetes, Etcd, InfluxDB 等。&lt;/p&gt;
&lt;h2&gt;Go 语言能解决什么样的问题&lt;/h2&gt;
&lt;p&gt;同绝大多数通用型编程语言相比，Go 语言更多的是为了解决我们在构建大型服务器软件过程中所遇到的软件工程方面的问题而设计的。乍看上去，这么讲可能会让人感觉 Go 非常无趣且工业化，但实际上，在设计过程中就着重于清晰和简洁，以及较高的可组合性，最后得到的反而会是一门使用起来效率高而且很有趣的编程语言，很多程序员都会发现，它有极强的表达力而且功能非常强大。&lt;/p&gt;
&lt;p&gt;总结为以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;清晰的依赖关系&lt;/li&gt;
&lt;li&gt;清晰的语法&lt;/li&gt;
&lt;li&gt;清晰的语义&lt;/li&gt;
&lt;li&gt;偏向组合而不是继承&lt;/li&gt;
&lt;li&gt;提供简单的编程模型（垃圾回收、并发）&lt;/li&gt;
&lt;li&gt;强大的内置工具（gofmt、godoc、gofix等）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;建议有兴趣的同学看看 &lt;a href="http://www.oschina.net/translate/go-at-google-language-design-in-the-service-of-software-engineering"&gt;Go在谷歌：以软件工程为目的的语言设计&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;Go 语言相对 Python 有哪些优势&lt;/h2&gt;
&lt;p&gt;这里引用一段&lt;a href="https://www.zhihu.com/question/21409296"&gt;知乎&lt;/a&gt;上某大牛的回答，如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;部署简单&lt;/strong&gt;。Go 编译生成的是一个静态可执行文件，除了 glibc 外没有其他外部依赖。这让部署变得异常方便：目标机器上只需要一个基础的系统和必要的管理、监控工具，完全不需要操心应用所需的各种包、库的依赖关系，大大减轻了维护的负担。这和 Python 有着巨大的区别。由于历史的原因，Python 的部署工具生态相当混乱【比如 setuptools, distutils, pip, buildout 的不同适用场合以及兼容性问题】。官方 PyPI 源又经常出问题，需要搭建私有镜像，而维护这个镜像又要花费不少时间和精力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;并发性好&lt;/strong&gt;。Goroutine 和 channel 使得编写高并发的服务端软件变得相当容易，很多情况下完全不需要考虑锁机制以及由此带来的各种问题。单个 Go 应用也能有效的利用多个 CPU 核，并行执行的性能好。这和 Python 也是天壤之比。多线程和多进程的服务端程序编写起来并不简单，而且由于全局锁 GIL 的原因，多线程的 Python 程序并不能有效利用多核，只能用多进程的方式部署；如果用标准库里的 multiprocessing 包又会对监控和管理造成不少的挑战【我们用的 supervisor 管理进程，对 fork 支持不好】。部署 Python 应用的时候通常是每个 CPU 核部署一个应用，这会造成不少资源的浪费，比如假设某个 Python 应用启动后需要占用 100MB 内存，而服务器有 32 个 CPU 核，那么留一个核给系统、运行 31 个应用副本就要浪费 3GB 的内存资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;良好的语言设计&lt;/strong&gt;。从学术的角度讲 Go 语言其实非常平庸，不支持许多高级的语言特性；但从工程的角度讲，Go 的设计是非常优秀的：规范足够简单灵活，有其他语言基础的程序员都能迅速上手。更重要的是 Go 自带完善的工具链，大大提高了团队协作的一致性。比如 gofmt 自动排版 Go 代码，很大程度上杜绝了不同人写的代码排版风格不一致的问题。把编辑器配置成在编辑存档的时候自动运行 gofmt，这样在编写代码的时候可以随意摆放位置，存档的时候自动变成正确排版的代码。此外还有 gofix, govet 等非常有用的工具。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;执行性能好&lt;/strong&gt;。虽然不如 C 和 Java，但通常比原生 Python 应用还是高一个数量级的，适合编写一些瓶颈业务。内存占用也非常省。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从个人对 Golang 的初步使用来说，体验还是相当不错的，但是也有下面几点需要注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;驼峰式命名风格（依据首字母大小写来决定其是否能被其他包引用），但我更喜欢 Python 的小写字母加下划线命名风格。&lt;/li&gt;
&lt;li&gt;没有好用的包管理器，Golang 官方也没有推荐最佳的包管理方案，目前公认的比较好用的有 Godeps, Govendor 及 Glide，而 Python 的包管理器 pip 已形成自己的一套标准。&lt;/li&gt;
&lt;li&gt;多行字符串的变量声明需要用反引号（`），Python 里是三个双引号（"""），参考&lt;a href="http://stackoverflow.com/questions/7933460/how-do-you-write-multiline-strings-in-go"&gt;http://stackoverflow.com/questions/7933460/how-do-you-write-multiline-strings-in-go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Golang 中的类型匹配是很严格的，不同的类型之间通常需要手动转换，所以在字符串拼接时往往需要对整型进行显式转换，如 &lt;code&gt;fmt.Println("num: " + strconv.Itoa(1))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Golang 语言语法里的语法糖并不多，如在 Python 中很流行的 map, reduce, range 等，在 Golang 里都没有得到支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，推荐阅读 &lt;a href="http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/"&gt;Golang 新手开发者要注意的陷阱和常见错误&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;学习资料推荐&lt;/h2&gt;
&lt;p&gt;建议先把 Go 的&lt;a href="https://golang.org/doc/"&gt;官方文档&lt;/a&gt;过一遍，主要有以下几项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tour.golang.org/welcome/1"&gt;A Tour of Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://golang.org/doc/code.html"&gt;How to write Go code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://golang.org/doc/effective_go.html"&gt;Effective Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://golang.org/ref/spec"&gt;Language Specification&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;官方文档看完后，基本也算入门了，这时候可以看看 &lt;a href="https://gobyexample.com/"&gt;Go 的示例代码&lt;/a&gt;，或者去 &lt;a href="https://projecteuler.net/"&gt;Project Euler&lt;/a&gt; 刷刷题。&lt;/p&gt;
&lt;p&gt;当然也可以去知乎看看大牛们都是如何学习的，链接 &lt;a href="https://www.zhihu.com/question/23486344"&gt;https://www.zhihu.com/question/23486344&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;虽然 Go 有很多被诟病的地方，比如 GC 和对错误的处理方式，但没有任何语言是完美的，从实用角度来讲，Go 有着不输于 Python 的开发效率，完善的第三方工具，以及强大的社区支持，这些就足够了。&lt;/p&gt;
&lt;p&gt;相关链接：&lt;br /&gt;
&lt;a href="https://golang.org/doc/"&gt;https://golang.org/doc/&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://talks.golang.org/2012/splash.article"&gt;https://talks.golang.org/2012/splash.article&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://www.zhihu.com/question/21409296"&gt;https://www.zhihu.com/question/21409296&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://www.zhihu.com/question/23486344"&gt;https://www.zhihu.com/question/23486344&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/7933460/how-do-you-write-multiline-strings-in-go"&gt;http://stackoverflow.com/questions/7933460/how-do-you-write-multiline-strings-in-go&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/"&gt;http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.oschina.net/translate/go-at-google-language-design-in-the-service-of-software-engineering"&gt;http://www.oschina.net/translate/go-at-google-language-design-in-the-service-of-software-engineering&lt;/a&gt;&lt;/p&gt;</summary><category term="Golang"></category><category term="Python"></category></entry></feed>