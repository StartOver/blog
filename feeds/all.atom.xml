<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>startover's blog</title><link href="http://startover.github.io/" rel="alternate"></link><link href="http://startover.github.io/feeds/all.atom.xml" rel="self"></link><id>http://startover.github.io/</id><updated>2016-04-28T16:47:00+08:00</updated><entry><title>Cloud Insight Agent 与 Nagios 集成</title><link href="http://startover.github.io/articles/2016/04/28/cloud-insight-nagios-integration/" rel="alternate"></link><published>2016-04-28T16:47:00+08:00</published><author><name>startover</name></author><id>tag:startover.github.io,2016-04-28:articles/2016/04/28/cloud-insight-nagios-integration/</id><summary type="html">&lt;h2&gt;原理介绍&lt;/h2&gt;
&lt;p&gt;同大多数 Nagios 的可视化系统一样，Cloud Insight Agent 依赖于 Nagios 输出的指标数据，也即需要启用 Nagios 的性能数据处理功能（在 nagios.cfg 文件中，设置process_performance_data=1即可）。&lt;/p&gt;
&lt;h2&gt;Nagios 安装配置&lt;/h2&gt;
&lt;p&gt;由于 Nagios 安装配置较为繁琐，这里通过 Docker 容器的方式来解决这个问题。&lt;/p&gt;
&lt;p&gt;然而，Cloud Insight Agent 需要读取 Nagios 的配置文件且依赖于 Nagios 输出的指标数据，所以我们需要将这部分文件挂载到系统主机上。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建 Nagios 配置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mkdir -p /usr/local/nagios/data
$ sudo mkdir -p /usr/local/nagios/etc
$ sudo wget -O /usr/local/nagios/etc/nagios.cfg https://raw.githubusercontent.com/startover/cloudinsight-docker-nagios/master/nagios.cfg
$ sudo vi /usr/local/nagios/etc/nagios.cfg
...
&lt;span class="c1"&gt;# 启用 Nagios 的性能数据处理功能&lt;/span&gt;
&lt;span class="nv"&gt;process_performance_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1

&lt;span class="nv"&gt;host_perfdata_command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;process-host-perfdata
&lt;span class="nv"&gt;service_perfdata_command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;process-service-perfdata

&lt;span class="nv"&gt;host_perfdata_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/nagios/data/host-perfdata
&lt;span class="nv"&gt;service_perfdata_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/nagios/data/service-perfdata

&lt;span class="nv"&gt;host_perfdata_file_template&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;HOSTPERFDATA&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="nv"&gt;$TIMET&lt;/span&gt;$&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="nv"&gt;$HOSTNAME&lt;/span&gt;$&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="nv"&gt;$HOSTEXECUTIONTIME&lt;/span&gt;$&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="nv"&gt;$HOSTOUTPUT&lt;/span&gt;$&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="nv"&gt;$HOSTPERFDATA&lt;/span&gt;$
&lt;span class="nv"&gt;service_perfdata_file_template&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;SERVICEPERFDATA&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="nv"&gt;$TIMET&lt;/span&gt;$&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="nv"&gt;$HOSTNAME&lt;/span&gt;$&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="nv"&gt;$SERVICEDESC&lt;/span&gt;$&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="nv"&gt;$SERVICEEXECUTIONTIME&lt;/span&gt;$&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="nv"&gt;$SERVICELATENCY&lt;/span&gt;$&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="nv"&gt;$SERVICEOUTPUT&lt;/span&gt;$&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="nv"&gt;$SERVICEPERFDATA&lt;/span&gt;$
...
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;挂载文件权限设置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于挂载文件默认是root用户访问权限，需将其赋予容器内的 nagios 用户，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo chown -R 999:999 /usr/local/nagios
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;运行 Nagios 容器&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run -d --name docker-nagios &lt;span class="se"&gt;\&lt;/span&gt;
             -h docker-nagios &lt;span class="se"&gt;\&lt;/span&gt;
             -p &lt;span class="m"&gt;25&lt;/span&gt; -p &lt;span class="m"&gt;80&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
             -v /usr/local/nagios/etc/nagios.cfg:/usr/local/nagios/etc/nagios.cfg &lt;span class="se"&gt;\&lt;/span&gt;
             -v /usr/local/nagios/data:/usr/local/nagios/data &lt;span class="se"&gt;\&lt;/span&gt;
             -v /etc/localtime:/etc/localtime:ro &lt;span class="se"&gt;\&lt;/span&gt;
             quantumobject/docker-nagios
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Cloud Insight Agent 集成&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;安装 Cloud Insight Agent&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nv"&gt;CI_LICENSE_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;YOUR_LICENSE_KEY_HERE bash -c &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl -L https://download.oneapm.com/oneapm_ci_agent/install_agent.sh&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;配置 Nagios 监控&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /etc/oneapm-ci-agent/conf.d
$ sudo cp nagios.yaml.example nagios.yaml
$ sudo vi nagios.yaml
init_config:
  &lt;span class="c1"&gt;# check_freq: 30&lt;/span&gt;

instances:
  - nagios_conf: /usr/local/nagios/etc/nagios.cfg
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;重启 Cloud Insight Agent&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo /etc/init.d/oneapm-ci-agent restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;关于 Nagios 的介绍和相关配置，请参考下面几篇文章：&lt;br /&gt;
&lt;a href="http://www.cnblogs.com/mchina/archive/2013/02/20/2883404.html"&gt;http://www.cnblogs.com/mchina/archive/2013/02/20/2883404.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.unixmen.com/install-configure-nagios-4-centos-7/"&gt;http://www.unixmen.com/install-configure-nagios-4-centos-7/&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://kura.io/2010/03/21/configuring-nagios-to-monitor-remote-load-disk-using-nrpe/"&gt;https://kura.io/2010/03/21/configuring-nagios-to-monitor-remote-load-disk-using-nrpe/&lt;/a&gt;&lt;/p&gt;</summary><category term="Cloud Insight"></category><category term="Nagios"></category></entry><entry><title>Python Flask vs Ruby Sinatra vs Go Martini vs Node Express</title><link href="http://startover.github.io/articles/2016/03/15/python-ruby-go-node-benchmark/" rel="alternate"></link><published>2016-03-15T14:21:00+08:00</published><author><name>startover</name></author><id>tag:startover.github.io,2016-03-15:articles/2016/03/15/python-ruby-go-node-benchmark/</id><summary type="html">&lt;p&gt;&lt;em&gt;题外话一&lt;/em&gt;：&lt;br /&gt;
最近一段时间，Cloud Insight接连发布了三种语言（Python, Node, Ruby）的SDK，Cloud Insight Agent也迎来了重大突破，发布了&lt;a href="http://www.oneapm.com/ci/windows.html"&gt;Windows监控&lt;/a&gt;第一个版本，总算可以松口气写点东西了...&lt;/p&gt;
&lt;p&gt;&lt;em&gt;题外话二&lt;/em&gt;：&lt;br /&gt;
偶然的机会看到一篇&lt;a href="https://realpython.com/blog/python/python-ruby-and-golang-a-web-Service-application-comparison/"&gt;blog&lt;/a&gt;，文中详细介绍了&lt;a href="https://github.com/mitsuhiko/flask"&gt;Flask&lt;/a&gt;(Python), &lt;a href="https://github.com/sinatra/sinatra"&gt;Sinatra&lt;/a&gt;(Ruby)以及&lt;a href="https://github.com/go-martini/martini"&gt;Matini&lt;/a&gt;(Golang)这三类微型框架的用法，并提供了各个框架在Docker下的部署方式。然而，美中不足的是没有提供各个框架的性能对比情况，经过一番搜罗，发现了一篇对现今主流框架做&lt;a href="https://medium.com/@tschundeee/express-vs-flask-vs-go-acc0879c2122#.vticwh9tn"&gt;性能对比的文章&lt;/a&gt;，找到两者的结合点，于是才有了今天这篇文章 :)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;
回归正题，之所以选择&lt;a href="https://github.com/mitsuhiko/flask"&gt;Flask&lt;/a&gt;(Python), &lt;a href="https://github.com/sinatra/sinatra"&gt;Sinatra&lt;/a&gt;(Ruby), &lt;a href="https://github.com/go-martini/martini"&gt;Matini&lt;/a&gt;(Golang)和&lt;a href="https://github.com/expressjs/express"&gt;Express&lt;/a&gt;(Node)，主要是经验所限以及个人比较喜欢这类微型框架，下面我们就对各个框架在同等条件下的性能表现一探究竟。&lt;/p&gt;
&lt;p&gt;本文源码地址：&lt;a href="https://github.com/startover/fibonacci-webapp-benchmark"&gt;https://github.com/startover/fibonacci-webapp-benchmark&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;环境准备：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4&gt;&lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;安装文档：&lt;a href="https://docs.docker.com/engine/installation/"&gt;https://docs.docker.com/engine/installation/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;&lt;a href="https://httpd.apache.org/docs/2.4/programs/ab.html"&gt;ab&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;CentOS/Redhat:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yum install httpd-tools&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Ubuntu/Debian:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;apt-get update &amp;amp;&amp;amp; apt-get install apache2-utils&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;启动容器&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone git@github.com:startover/fibonacci-webapp-benchmark.git
$ &lt;span class="nb"&gt;cd&lt;/span&gt; fibonacci-webapp-benchmark
$ ./docker-compose up -d
Recreating fibonacciwebappbenchmark_python_1...
Recreating fibonacciwebappbenchmark_go_1...
Recreating fibonacciwebappbenchmark_ruby_1...
Recreating fibonacciwebappbenchmark_node_1...
$ docker ps
CONTAINER ID        IMAGE                             COMMAND                  CREATED             STATUS              PORTS                    NAMES
14e0d2388dca        fibonacciwebappbenchmark_node     &lt;span class="s2"&gt;&amp;quot;npm start&amp;quot;&lt;/span&gt;              &lt;span class="m"&gt;6&lt;/span&gt; seconds ago       Up &lt;span class="m"&gt;5&lt;/span&gt; seconds        0.0.0.0:8080-&amp;gt;8080/tcp   fibonacciwebappbenchmark_node_1
8b1bdd070f83        fibonacciwebappbenchmark_ruby     &lt;span class="s2"&gt;&amp;quot;bundle exec ruby sin&amp;quot;&lt;/span&gt;   &lt;span class="m"&gt;23&lt;/span&gt; seconds ago      Up &lt;span class="m"&gt;22&lt;/span&gt; seconds       0.0.0.0:4567-&amp;gt;4567/tcp   fibonacciwebappbenchmark_ruby_1
333360123b56        fibonacciwebappbenchmark_go       &lt;span class="s2"&gt;&amp;quot;go run martini.go&amp;quot;&lt;/span&gt;      &lt;span class="m"&gt;34&lt;/span&gt; seconds ago      Up &lt;span class="m"&gt;32&lt;/span&gt; seconds       0.0.0.0:3000-&amp;gt;3000/tcp   fibonacciwebappbenchmark_go_1
df50829f511b        fibonacciwebappbenchmark_python   &lt;span class="s2"&gt;&amp;quot;python app.py&amp;quot;&lt;/span&gt;          &lt;span class="m"&gt;42&lt;/span&gt; seconds ago      Up &lt;span class="m"&gt;41&lt;/span&gt; seconds       0.0.0.0:5000-&amp;gt;5000/tcp   fibonacciwebappbenchmark_python_1
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;性能测试（请求数10w，并发100）&lt;/h2&gt;
&lt;h4&gt;Python + Flask&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ab -n &lt;span class="m"&gt;100000&lt;/span&gt; -c &lt;span class="m"&gt;100&lt;/span&gt; http://localhost:5000/10
...
Concurrency Level:      100
Time taken &lt;span class="k"&gt;for&lt;/span&gt; tests:   168.322 seconds
Complete requests:      100000
Failed requests:        0
Write errors:           0
Total transferred:      &lt;span class="m"&gt;18400000&lt;/span&gt; bytes
HTML transferred:       &lt;span class="m"&gt;2900000&lt;/span&gt; bytes
Requests per second:    594.10 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="c1"&gt;#/sec] (mean)&lt;/span&gt;
Time per request:       168.322 &lt;span class="o"&gt;[&lt;/span&gt;ms&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;mean&lt;span class="o"&gt;)&lt;/span&gt;
Time per request:       1.683 &lt;span class="o"&gt;[&lt;/span&gt;ms&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;mean, across all concurrent requests&lt;span class="o"&gt;)&lt;/span&gt;
Transfer rate:          106.75 &lt;span class="o"&gt;[&lt;/span&gt;Kbytes/sec&lt;span class="o"&gt;]&lt;/span&gt; received

Connection Times &lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;
              min  mean&lt;span class="o"&gt;[&lt;/span&gt;+/-sd&lt;span class="o"&gt;]&lt;/span&gt; median   max
Connect:        &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;   0.3      &lt;span class="m"&gt;0&lt;/span&gt;      12
Processing:    &lt;span class="m"&gt;21&lt;/span&gt;  &lt;span class="m"&gt;168&lt;/span&gt;  15.3    &lt;span class="m"&gt;166&lt;/span&gt;     295
Waiting:       &lt;span class="m"&gt;13&lt;/span&gt;  &lt;span class="m"&gt;167&lt;/span&gt;  15.1    &lt;span class="m"&gt;165&lt;/span&gt;     286
Total:         &lt;span class="m"&gt;26&lt;/span&gt;  &lt;span class="m"&gt;168&lt;/span&gt;  15.3    &lt;span class="m"&gt;166&lt;/span&gt;     295
...
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Ruby + Sinatra&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ab -n &lt;span class="m"&gt;100000&lt;/span&gt; -c &lt;span class="m"&gt;100&lt;/span&gt; http://localhost:4567/10
...
Concurrency Level:      100
Time taken &lt;span class="k"&gt;for&lt;/span&gt; tests:   496.401 seconds
Complete requests:      100000
Failed requests:        0
Write errors:           0
Total transferred:      &lt;span class="m"&gt;30700000&lt;/span&gt; bytes
HTML transferred:       &lt;span class="m"&gt;3000000&lt;/span&gt; bytes
Requests per second:    201.45 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="c1"&gt;#/sec] (mean)&lt;/span&gt;
Time per request:       496.401 &lt;span class="o"&gt;[&lt;/span&gt;ms&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;mean&lt;span class="o"&gt;)&lt;/span&gt;
Time per request:       4.964 &lt;span class="o"&gt;[&lt;/span&gt;ms&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;mean, across all concurrent requests&lt;span class="o"&gt;)&lt;/span&gt;
Transfer rate:          60.40 &lt;span class="o"&gt;[&lt;/span&gt;Kbytes/sec&lt;span class="o"&gt;]&lt;/span&gt; received

Connection Times &lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;
              min  mean&lt;span class="o"&gt;[&lt;/span&gt;+/-sd&lt;span class="o"&gt;]&lt;/span&gt; median   max
Connect:        &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;   0.3      &lt;span class="m"&gt;0&lt;/span&gt;      14
Processing:   &lt;span class="m"&gt;180&lt;/span&gt;  &lt;span class="m"&gt;493&lt;/span&gt; 522.3    &lt;span class="m"&gt;412&lt;/span&gt;   10507
Waiting:      &lt;span class="m"&gt;177&lt;/span&gt;  &lt;span class="m"&gt;485&lt;/span&gt; 521.7    &lt;span class="m"&gt;404&lt;/span&gt;   10505
Total:        &lt;span class="m"&gt;180&lt;/span&gt;  &lt;span class="m"&gt;493&lt;/span&gt; 522.3    &lt;span class="m"&gt;412&lt;/span&gt;   10507
...
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Go + Martini&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ab -n &lt;span class="m"&gt;100000&lt;/span&gt; -c &lt;span class="m"&gt;100&lt;/span&gt; http://localhost:3000/10
...
Concurrency Level:      100
Time taken &lt;span class="k"&gt;for&lt;/span&gt; tests:   48.284 seconds
Complete requests:      100000
Failed requests:        0
Write errors:           0
Total transferred:      &lt;span class="m"&gt;15700000&lt;/span&gt; bytes
HTML transferred:       &lt;span class="m"&gt;4100000&lt;/span&gt; bytes
Requests per second:    2071.08 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="c1"&gt;#/sec] (mean)&lt;/span&gt;
Time per request:       48.284 &lt;span class="o"&gt;[&lt;/span&gt;ms&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;mean&lt;span class="o"&gt;)&lt;/span&gt;
Time per request:       0.483 &lt;span class="o"&gt;[&lt;/span&gt;ms&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;mean, across all concurrent requests&lt;span class="o"&gt;)&lt;/span&gt;
Transfer rate:          317.54 &lt;span class="o"&gt;[&lt;/span&gt;Kbytes/sec&lt;span class="o"&gt;]&lt;/span&gt; received

Connection Times &lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;
              min  mean&lt;span class="o"&gt;[&lt;/span&gt;+/-sd&lt;span class="o"&gt;]&lt;/span&gt; median   max
Connect:        &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;1&lt;/span&gt;   0.7      &lt;span class="m"&gt;1&lt;/span&gt;      14
Processing:    &lt;span class="m"&gt;13&lt;/span&gt;   &lt;span class="m"&gt;47&lt;/span&gt;  12.0     &lt;span class="m"&gt;47&lt;/span&gt;     105
Waiting:        &lt;span class="m"&gt;3&lt;/span&gt;   &lt;span class="m"&gt;35&lt;/span&gt;  10.4     &lt;span class="m"&gt;34&lt;/span&gt;      99
Total:         &lt;span class="m"&gt;14&lt;/span&gt;   &lt;span class="m"&gt;48&lt;/span&gt;  12.0     &lt;span class="m"&gt;48&lt;/span&gt;     112
...
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Node + Express&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ab -n &lt;span class="m"&gt;100000&lt;/span&gt; -c &lt;span class="m"&gt;100&lt;/span&gt; http://localhost:8080/10
...
Concurrency Level:      100
Time taken &lt;span class="k"&gt;for&lt;/span&gt; tests:   59.962 seconds
Complete requests:      100000
Failed requests:        0
Write errors:           0
Total transferred:      &lt;span class="m"&gt;20700000&lt;/span&gt; bytes
HTML transferred:       &lt;span class="m"&gt;3000000&lt;/span&gt; bytes
Requests per second:    1667.72 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="c1"&gt;#/sec] (mean)&lt;/span&gt;
Time per request:       59.962 &lt;span class="o"&gt;[&lt;/span&gt;ms&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;mean&lt;span class="o"&gt;)&lt;/span&gt;
Time per request:       0.600 &lt;span class="o"&gt;[&lt;/span&gt;ms&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;mean, across all concurrent requests&lt;span class="o"&gt;)&lt;/span&gt;
Transfer rate:          337.13 &lt;span class="o"&gt;[&lt;/span&gt;Kbytes/sec&lt;span class="o"&gt;]&lt;/span&gt; received

Connection Times &lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;
              min  mean&lt;span class="o"&gt;[&lt;/span&gt;+/-sd&lt;span class="o"&gt;]&lt;/span&gt; median   max
Connect:        &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;   0.5      &lt;span class="m"&gt;0&lt;/span&gt;      20
Processing:    &lt;span class="m"&gt;26&lt;/span&gt;   &lt;span class="m"&gt;59&lt;/span&gt;  11.2     &lt;span class="m"&gt;59&lt;/span&gt;     168
Waiting:       &lt;span class="m"&gt;16&lt;/span&gt;   &lt;span class="m"&gt;56&lt;/span&gt;  10.8     &lt;span class="m"&gt;55&lt;/span&gt;     168
Total:         &lt;span class="m"&gt;26&lt;/span&gt;   &lt;span class="m"&gt;60&lt;/span&gt;  11.1     &lt;span class="m"&gt;59&lt;/span&gt;     171
...
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;总结：&lt;/h2&gt;
&lt;table class="table table-bordered"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Web framework&lt;/th&gt;
&lt;th align="center"&gt;avg&lt;/th&gt;
&lt;th align="center"&gt;min&lt;/th&gt;
&lt;th align="center"&gt;max&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Flask(Python)&lt;/td&gt;
&lt;td align="center"&gt;168ms&lt;/td&gt;
&lt;td align="center"&gt;26ms&lt;/td&gt;
&lt;td align="center"&gt;295ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sinatra(Ruby)&lt;/td&gt;
&lt;td align="center"&gt;496ms&lt;/td&gt;
&lt;td align="center"&gt;180ms&lt;/td&gt;
&lt;td align="center"&gt;10507ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Martini(Go)&lt;/td&gt;
&lt;td align="center"&gt;48ms&lt;/td&gt;
&lt;td align="center"&gt;14ms&lt;/td&gt;
&lt;td align="center"&gt;112ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Express(Node)&lt;/td&gt;
&lt;td align="center"&gt;60ms&lt;/td&gt;
&lt;td align="center"&gt;26ms&lt;/td&gt;
&lt;td align="center"&gt;171ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可见，&lt;a href="https://github.com/go-martini/martini"&gt;Matini&lt;/a&gt;(Golang)和&lt;a href="https://github.com/expressjs/express"&gt;Express&lt;/a&gt;(Node)性能优势比较明显，也在意料之中，&lt;a href="https://github.com/mitsuhiko/flask"&gt;Flask&lt;/a&gt;(Python)表现中规中矩，相较之下，&lt;a href="https://github.com/sinatra/sinatra"&gt;Sinatra&lt;/a&gt;(Ruby)的性能简直是没法忍（PS: 我不是Ruby黑）！感兴趣的亲们可以在自己的环境测试下。完。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;br /&gt;
&lt;a href="https://realpython.com/blog/python/python-ruby-and-golang-a-web-Service-application-comparison"&gt;https://realpython.com/blog/python/python-ruby-and-golang-a-web-Service-application-comparison/&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://medium.com/@tschundeee/express-vs-flask-vs-go-acc0879c2122#.6katm1qn2"&gt;https://medium.com/@tschundeee/express-vs-flask-vs-go-acc0879c2122#.6katm1qn2&lt;/a&gt;&lt;/p&gt;</summary><category term="Flask"></category><category term="Sinatra"></category><category term="Martini"></category><category term="Express"></category><category term="Performance"></category></entry><entry><title>【译】Python中如何创建mock？</title><link href="http://startover.github.io/articles/2015/06/06/python-mock-introduction/" rel="alternate"></link><published>2015-06-06T11:10:00+08:00</published><author><name>startover</name></author><id>tag:startover.github.io,2015-06-06:articles/2015/06/06/python-mock-introduction/</id><summary type="html">&lt;p&gt;原文地址：&lt;a href="http://engineroom.trackmaven.com/blog/making-a-mockery-of-python/"&gt;http://engineroom.trackmaven.com/blog/making-a-mockery-of-python/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今天我们来谈论下mock的使用。当然，请不要误会，这里的mock可不是嘲弄的意思。mock是一门技术，通过伪造部分实际代码，从而让我们能够验证剩余代码的正确性。现在我们将通过几个简单的示例演示mock在Python测试代码中的使用，以及这项极其有用的技术是如何帮助我们改善测试代码的。&lt;/p&gt;
&lt;h2&gt;为什么我们需要mock？&lt;/h2&gt;
&lt;p&gt;当我们进行单元测试的时候，我们的目标往往是为了测试非常小的代码块，例如一个独立存在的函数或类方法。换句话说，我们只需要针对那个函数内部的代码进行测试。如果测试代码依赖于其他的代码片段，即使被测试的函数没有变化，我们会发现在某种不幸的情形下，这部分内嵌代码的修改可能会破坏原有的测试。看看下面的例子，你将豁然开朗：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# function.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_and_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;addition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
    &lt;span class="n"&gt;multiple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

&lt;span class="c1"&gt;# test.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;function&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;add_and_multiply&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_add_and_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

        &lt;span class="n"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add_and_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;----------------------------------------------------------------------&lt;/span&gt;
&lt;span class="n"&gt;Ran&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;0.001&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;

&lt;span class="n"&gt;OK&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在上面的例子中，&lt;code&gt;add_and_multiply&lt;/code&gt;计算两个数的和与乘积并返回。&lt;code&gt;add_and_multiply&lt;/code&gt;调用了另一个函数&lt;code&gt;multiply&lt;/code&gt;进行乘积计算。&lt;/p&gt;
&lt;p&gt;假设我们想要摒弃“传统“的数学，并重新定义&lt;code&gt;multiply&lt;/code&gt;函数，在原有的乘积结果上加3。&lt;/p&gt;
&lt;p&gt;新的&lt;code&gt;multiply&lt;/code&gt;函数如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在我们遇到一个问题。我们的测试代码没有变化，我们想要测试的函数也没有变化，然而，&lt;code&gt;test_add_and_multiply&lt;/code&gt;却会执行失败：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="n"&gt;F&lt;/span&gt;
&lt;span class="o"&gt;======================================================================&lt;/span&gt;
&lt;span class="n"&gt;FAIL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;test_add_and_multiply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MyTestCase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;----------------------------------------------------------------------&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;test_add_and_multiply&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;

&lt;span class="o"&gt;----------------------------------------------------------------------&lt;/span&gt;
&lt;span class="n"&gt;Ran&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;0.001&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;

&lt;span class="n"&gt;FAILED&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;failures&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个问题之所以会发生，是因为我们的原始测试代码并非真正的单元测试。尽管我们想要测试的是外部函数，但我们隐性的将内部函数也包含进来，因为我们期望的结果是依赖于这个内部函数的行为的。虽然在上面简单的示例中呈现的差异显得毫无意义，但某些场景下，我们需要测试一个复杂的逻辑代码块 - 例如，一个Django视图函数基于某些特定条件调用各种不同的内部功能，从函数调用结果中分离出视图逻辑的测试就显得尤为重要了。&lt;/p&gt;
&lt;p&gt;解决这个问题有两种方案。我们要么忽略它，像集成测试那样去进行单元测试，要么求助于mock。第一种方案的缺点是，集成测试仅仅告诉我们函数调用时哪一行代码出问题了，这样更难找到问题根源所在。这并不是说，集成测试没有用处，因为在某些情况下它确实非常有用。不管怎样，单元测试和集成测试用于解决不同的问题，它们应该被同时使用。因此，如果我们想要成为一个好的测试人员，我们会选择另一种方案：mock。&lt;/p&gt;
&lt;h2&gt;mock是什么？&lt;/h2&gt;
&lt;p&gt;mock是一个极其优秀的Python包，Python 3已将其纳入标准库。对于我们这些还在UnicodeError遍布的Python 2.x中挣扎的苦逼码农，可以通过pip进行安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;mock有多种不同的用法。我们可以用它提供猴子补丁功能，创建伪造的对象，甚至可以作为一个上下文管理器。所有这些都是基于一个共同目标的，用副本替换部分代码来收集信息并返回伪造的响应。&lt;/p&gt;
&lt;p&gt;mock的&lt;a href="http://www.voidspace.org.uk/python/mock/"&gt;文档&lt;/a&gt;非常密集，寻找特定的用例信息可能会非常棘手。这里，我们就来看看一个常见的场景 - 替换一个内嵌函数并检查它的输入和输出。&lt;/p&gt;
&lt;h2&gt;开始mock之旅&lt;/h2&gt;
&lt;p&gt;让我们用mock来重新编写单元测试。接下来，我们将讨论发生了什么，以及为什么从测试的角度来看它是非常有用的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# test.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;function&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;add_and_multiply&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="nd"&gt;@mock.patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;function.multiply&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_add_and_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_multiply&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

        &lt;span class="n"&gt;mock_multiply&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;

        &lt;span class="n"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add_and_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;mock_multiply&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_once_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;至此，我们可以改变&lt;code&gt;multiply&lt;/code&gt;函数来做任何我们想做的 - 它可能返回加3后的乘积，返回None，或返回&lt;a href="https://www.youtube.com/watch?v=q-yxOFIkgxU&amp;amp;t=1m15s"&gt;favourite line from Monty Python and the Holy Grail&lt;/a&gt; - 你会发现，我们上面的测试仍然可以通过。这是因为我们mock了&lt;code&gt;multiply&lt;/code&gt;函数。在真正的单元测试场景下，我们并不关心&lt;code&gt;multiply&lt;/code&gt;函数内部发生了什么，从测试&lt;code&gt;add_and_multiply&lt;/code&gt;的角度来看，我们只关心&lt;code&gt;multiply&lt;/code&gt;被正确的参数调用了。这里我们假定有另一个单元测试会针对&lt;code&gt;multiply&lt;/code&gt;的内部逻辑进行测试。&lt;/p&gt;
&lt;h2&gt;刚才我们做了什么？&lt;/h2&gt;
&lt;p&gt;咋一看，上面的语法可能不好理解。让我们逐行分析：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@mock.patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;function.multiply&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_add_and_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_multiply&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们使用&lt;code&gt;mock.patch&lt;/code&gt;装饰器来用mock对象替换&lt;code&gt;multiply&lt;/code&gt;。然后，我们将它作为一个参数&lt;code&gt;mock_multiply&lt;/code&gt;插入到我们的测试代码中。在这个测试的上下文中，任何对&lt;code&gt;multiply&lt;/code&gt;的调用都会被重定向到&lt;code&gt;mock_multiply&lt;/code&gt;对象。&lt;/p&gt;
&lt;p&gt;有人会质疑 - “怎么能用对象替换函数！？“别担心！在Python的世界，函数也是对象。通常情况下，当我们调用&lt;code&gt;multiply()&lt;/code&gt;，我们实际执行的是&lt;code&gt;multiply&lt;/code&gt;函数的&lt;code&gt;__call__&lt;/code&gt;方法。然而，恰当的使用mock，对&lt;code&gt;multiply()&lt;/code&gt;的调用将执行我们的mock对象而不是&lt;code&gt;__call__&lt;/code&gt;方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mock_multiply&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为了使mock函数可以返回任何东西，我们需要定义其&lt;code&gt;return_value&lt;/code&gt;属性。实际上，当mock函数被调用时，它用于定义mock对象的返回值。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add_and_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mock_multiply&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_once_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在测试代码中，我们调用了外部函数&lt;code&gt;add_and_multiply&lt;/code&gt;。它会调用内嵌的&lt;code&gt;multiply&lt;/code&gt;函数，如果我们正确的进行了mock，调用将会被我们定义的mock对象取代。为了验证这一点，我们可以用到mock对象的高级特性 - 当它们被调用时，传给它们的任何参数将被储存起来。顾名思义，mock对象的&lt;code&gt;assert_called_once_with&lt;/code&gt;方法就是一个不错的捷径来验证某个对象是否被一组特定的参数调用过。如果被调用了，测试通过。反之，&lt;code&gt;assert_called_once_with&lt;/code&gt;会抛出&lt;code&gt;AssertionError&lt;/code&gt;的异常。&lt;/p&gt;
&lt;h2&gt;我们从中学到了什么？&lt;/h2&gt;
&lt;p&gt;好吧，我们遇到了很多实际问题。首先，我们通过mock将&lt;code&gt;multiply&lt;/code&gt;函数从&lt;code&gt;add_and_multiply&lt;/code&gt;中分离出来。这就意味着我们的单元测试只针对&lt;code&gt;add_and_multiply&lt;/code&gt;的内部逻辑。只有针对&lt;code&gt;add_and_multiply&lt;/code&gt;的代码修改将影响测试的成功与否。&lt;/p&gt;
&lt;p&gt;其次，我们现在可以控制内嵌函数的输出，以确保外部函数处理了不同的情况。例如，&lt;code&gt;add_and_multiply&lt;/code&gt;可能有逻辑条件依赖于&lt;code&gt;multiply&lt;/code&gt;的返回值：比如说，我们只想在乘积大于10的条件下返回一个值。通过人为设定&lt;code&gt;multiply&lt;/code&gt;的返回值，我们可以模拟乘积小于10的情况以及乘积大于10的情况，从而可以很容易测试我们的逻辑正确性。&lt;/p&gt;
&lt;p&gt;最后，我们现在可以验证被mock的函数被调用的次数，并传入了正确的参数。由于我们的mock对象取代了&lt;code&gt;multiply&lt;/code&gt;函数的位置，我们知道任何针对&lt;code&gt;multiply&lt;/code&gt;函数的调用都会被重定向到该mock对象。当测试一个复杂的功能时，确保每一步都被正确调用将是一件非常令人欣慰的事情。&lt;/p&gt;</summary><category term="Python"></category><category term="mock"></category></entry><entry><title>【译】提高Python运行效率的六个窍门</title><link href="http://startover.github.io/articles/2015/05/18/python-performance-tips/" rel="alternate"></link><published>2015-05-18T10:00:00+08:00</published><author><name>startover</name></author><id>tag:startover.github.io,2015-05-18:articles/2015/05/18/python-performance-tips/</id><summary type="html">&lt;p&gt;原文地址：&lt;a href="https://blog.newrelic.com/2015/01/21/python-performance-tips/"&gt;https://blog.newrelic.com/2015/01/21/python-performance-tips/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python是一门优秀的语言，它能让你在短时间内通过极少量代码就能完成许多操作。不仅如此，它还轻松支持多任务处理，比如多进程。&lt;/p&gt;
&lt;p&gt;不喜欢Python的人经常会吐嘈Python运行太慢。但是，事实并非如此。尝试以下六个窍门，来为你的Python应用提速。&lt;/p&gt;
&lt;h2&gt;窍门一：关键代码使用外部功能包&lt;/h2&gt;
&lt;p&gt;Python简化了许多编程任务，但是对于一些时间敏感的任务，它的表现经常不尽人意。使用C/C++或机器语言的外部功能包处理时间敏感任务，可以有效提高应用的运行效率。这些功能包往往依附于特定的平台，因此你要根据自己所用的平台选择合适的功能包。简而言之，这个窍门要你牺牲应用的可移植性以换取只有通过对底层主机的直接编程才能获得的运行效率。以下是一些你可以选择用来提升效率的功能包：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://cython.org/"&gt;Cython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pyinline.sourceforge.net/"&gt;Pylnlne&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pypy.org/"&gt;PyPy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/"&gt;Pyrex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些功能包的用处各有不同。比如说，使用C语言的数据类型，可以使涉及内存操作的任务更高效或者更直观。Pyrex就能帮助Python延展出这样的功能。Pylnline能使你在Python应用中直接使用C代码。内联代码是独立编译的，但是它把所有编译文件都保存在某处，并能充分利用C语言提供的高效率。&lt;/p&gt;
&lt;h2&gt;窍门二：在排序时使用键&lt;/h2&gt;
&lt;p&gt;Python含有许多古老的排序规则，这些规则在你创建定制的排序方法时会占用很多时间，而这些排序方法运行时也会拖延程序实际的运行速度。最佳的排序方法其实是尽可能多地使用键和内置的sort()方法。譬如，拿下面的代码来说：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt;
&lt;span class="n"&gt;somelist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;somelist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;somelist&lt;/span&gt;
&lt;span class="c1"&gt;#Output = [(1, 5, 8), (6, 2, 4), (9, 7, 5)]&lt;/span&gt;
&lt;span class="n"&gt;somelist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;somelist&lt;/span&gt;
&lt;span class="c1"&gt;#Output = [(6, 2, 4), (1, 5, 8), (9, 7, 5)]&lt;/span&gt;
&lt;span class="n"&gt;somelist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;somelist&lt;/span&gt;
&lt;span class="c1"&gt;#Output = [(6, 2, 4), (9, 7, 5), (1, 5, 8)],&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在每段例子里，list都是根据你选择的用作关键参数的索引进行排序的。这个方法不仅对数值类型有效，还同样适用于字符串类型。&lt;/p&gt;
&lt;h2&gt;窍门三：针对循环的优化&lt;/h2&gt;
&lt;p&gt;每一种编程语言都强调最优化的循环方案。当使用Python时，你可以借助丰富的技巧让循环程序跑得更快。然而，开发者们经常遗忘的一个技巧是：尽量避免在循环中访问变量的属性。譬如，拿下面的代码来说：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;lowerlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;this&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;is&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;lowercase&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;upper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;
&lt;span class="n"&gt;upperlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;append&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;upperlist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lowerlist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;upperlist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#Output = [&amp;#39;THIS&amp;#39;, &amp;#39;IS&amp;#39;, &amp;#39;LOWERCASE&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;每次你调用str.upper,  Python都会计算这个式子的值。然而，如果你把这个求值赋值给一个变量，那么求值的结果就能提前知道，Python程序就能运行得更快。因此，关键就是尽可能减小Python在循环中的工作量。因为Python解释执行的特性，在上面的例子中会大大减慢它的速度。&lt;/p&gt;
&lt;p&gt;（注意：优化循环的方法还有很多，这只是其中之一。比如，很多程序员会认为，列表推导式是提高循环速度的最佳方法。关键在于，优化循环方案是提高应用程序运行速度的上佳选择。）&lt;/p&gt;
&lt;h2&gt;窍门四：使用较新的Python版本&lt;/h2&gt;
&lt;p&gt;如果你在网上搜索Python，你会发现数不尽的信息都是关于如何升级Python版本。通常，每个版本的Python都会包含优化内容，使其运行速度优于之前的版本。但是，限制因素在于，你最喜欢的函数库有没有同步更新支持新的Python版本。与其争论函数库是否应该更新，关键在于新的Python版本是否足够高效来支持这一更新。&lt;/p&gt;
&lt;p&gt;你要保证自己的代码在新版本里还能运行。你需要使用新的函数库才能体验新的Python版本，然后你需要在做出关键性的改动时检查自己的应用。只有当你完成必要的修正之后，你才能体会新版本的不同。&lt;/p&gt;
&lt;p&gt;然而，如果你只是确保自己的应用在新版本中可以运行，你很可能会错过新版本提供的新特性。一旦你决定更新，请分析你的应用在新版本下的表现，并检查可能出问题的部分，然后优先针对这些部分应用新版本的特性。只有这样，用户才能在更新之初就觉察到应用性能的改观。&lt;/p&gt;
&lt;h2&gt;窍门五：尝试多种编码方法&lt;/h2&gt;
&lt;p&gt;每次创建应用时都使用同一种编码方法几乎无一例外会导致应用的运行效率不尽人意。可以在程序分析时尝试一些试验性的办法。譬如说，在处理字典中的数据项时，你既可以使用安全的方法，先确保数据项已经存在再进行更新，也可以直接对数据项进行更新，把不存在的数据项作为特例分开处理。请看下面第一段代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
&lt;span class="n"&gt;myDict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abcd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;myDict&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;myDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;myDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myDict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当一开始myDict为空时，这段代码会跑得比较快。然而，通常情况下，myDict填满了数据，至少填有大部分数据，这时换另一种方法会更有效率。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
&lt;span class="n"&gt;myDict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abcd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;myDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;myDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myDict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在两种方法中输出结果都是一样的。区别在于输出是如何获得的。跳出常规的思维模式，创建新的编程技巧能使你的应用更有效率。&lt;/p&gt;
&lt;h2&gt;窍门六：交叉编译你的应用&lt;/h2&gt;
&lt;p&gt;开发者有时会忘记计算机其实并不理解用来创建现代应用程序的编程语言。计算机理解的是机器语言。为了运行你的应用，你借助一个应用将你所编的人类可读的代码转换成机器可读的代码。有时，你用一种诸如Python这样的语言编写应用，再以C++这样的语言运行你的应用，这在运行的角度来说，是可行的。关键在于，你想你的应用完成什么事情，而你的主机系统能提供什么样的资源。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://nuitka.net/"&gt;Nuitka&lt;/a&gt;是一款有趣的交叉编译器，能将你的Python代码转化成C++代码。这样，你就可以在native模式下执行自己的应用，而无需依赖于解释器程序。你会发现自己的应用运行效率有了较大的提高，但是这会因平台和任务的差异而有所不同。&lt;/p&gt;
&lt;p&gt;（注意：Nuitka现在还处在测试阶段，所以在实际应用中请多加注意。实际上，当下最好还是把它用于实验。此外，关于交叉编译是否为提高运行效率的最佳方法还存在讨论的空间。开发者已经使用交叉编译多年，用来提高应用的速度。记住，每一种解决办法都有利有弊，在把它用于生产环境之前请仔细权衡。）&lt;/p&gt;
&lt;p&gt;在使用交叉编译器时，记得确保它支持你所用的Python版本。Nuitka支持Python2.6, 2.7, 3.2和3.3。为了让解决方案生效，你需要一个Python解释器和一个C++编译器。Nuitka支持许多C++编译器，其中包括&lt;a href="http://www.visualstudio.com/"&gt;Microsoft Visual Studio&lt;/a&gt;, &lt;a href="http://www.mingw.org/"&gt;MinGW&lt;/a&gt; 和 &lt;a href="http://clang.llvm.org/"&gt;Clang/LLVM&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;交叉编译可能造成一些严重问题。比如，在使用Nuitka时，你会发现即便是一个小程序也会消耗巨大的驱动空间。因为Nuitka借助一系列的动态链接库（DDLs）来执行Python的功能。因此，如果你用的是一个资源很有限的系统，这种方法或许不太可行。&lt;/p&gt;
&lt;h2&gt;结论&lt;/h2&gt;
&lt;p&gt;前文所述的六个窍门都能帮助你创建运行更有效率的Python应用。但是银弹是不存在的。上述的这些窍门不一定每次都能奏效。在特定的Python的版本下，有的窍门或许比其他的表现更好，但这有时候甚至取决于平台的差异。你需要总结分析你的应用，找到它效率低下的部分，然后尝试这些窍门，找到解决问题的最佳方法。&lt;/p&gt;</summary><category term="Python"></category><category term="Performance"></category></entry><entry><title>Python - 装饰器使用过程中的误区</title><link href="http://startover.github.io/articles/2015/04/27/python-decorator-mistake/" rel="alternate"></link><published>2015-04-27T14:07:00+08:00</published><author><name>startover</name></author><id>tag:startover.github.io,2015-04-27:articles/2015/04/27/python-decorator-mistake/</id><summary type="html">&lt;h2&gt;&lt;strong&gt;装饰器基本概念&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;大家都知道装饰器是一个很著名的设计模式，经常被用于AOP(面向切面编程)的场景，较为经典的有插入日志，性能测试，事务处理，Web权限校验，Cache等。&lt;/p&gt;
&lt;p&gt;Python语言本身提供了装饰器语法（@），典型的装饰器实现如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@function_wrapper&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;@实际上是python2.4才提出的语法糖，针对python2.4以前的版本有另一种等价的实现：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;strong&gt;装饰器的两种实现&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;函数包装器 - 经典实现&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@function_wrapper&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;类包装器 - 更易于理解&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;function_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@function_wrapper&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;strong&gt;函数（function）自省&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;当我们谈到一个函数时，通常希望这个函数的属性像其文档上描述的那样，是被明确定义的，例如&lt;code&gt;__name__&lt;/code&gt;和&lt;code&gt;__doc__&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;针对某个函数应用装饰器时，这个函数的属性就会发生变化，但这并不是我们所期望的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@function_wrapper&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;_wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;python标准库提供了&lt;code&gt;functools.wraps()&lt;/code&gt;，来解决这个问题。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@functools.wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@function_wrapper&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;function&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然而，当我们想要获取被包装函数的参数（&lt;code&gt;argument&lt;/code&gt;）或源代码（&lt;code&gt;source code&lt;/code&gt;）时，同样不能得到我们想要的结果。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="nd"&gt;@function_wrapper&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getargspec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;ArgSpec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="n"&gt;varargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;args&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kwargs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nd"&gt;@functools.wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;strong&gt;包装类方法（&lt;code&gt;@classmethod&lt;/code&gt;）&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;当包装器（&lt;code&gt;@function_wrapper&lt;/code&gt;）被应用于&lt;code&gt;@classmethod&lt;/code&gt;时，将会抛出如下异常：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@function_wrapper&lt;/span&gt;
    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cmethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.../functools.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;update_wrapper&lt;/span&gt;
    &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;classmethod&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__module__&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因为&lt;code&gt;@classmethod&lt;/code&gt;在实现时，缺少&lt;code&gt;functools.update_wrapper&lt;/code&gt;需要的某些属性。这是&lt;code&gt;functools.update_wrapper&lt;/code&gt;在python2中的bug，3.2版本已被修复，参考&lt;a href="http://bugs.python.org/issue3445"&gt;http://bugs.python.org/issue3445&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;然而，在python3下执行，另一个问题出现了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@function_wrapper&lt;/span&gt;
    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cmethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmethod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;classmethod.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmethod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;classmethod.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_wrapper&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;classmethod&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;callable&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是因为包装器认定被包装的函数（&lt;code&gt;@classmethod&lt;/code&gt;）是可以直接被调用的，但事实并不一定是这样的。被包装的函数实际上可能是描述符（&lt;code&gt;descriptor&lt;/code&gt;），意味着为了使其可调用，该函数（描述符）必须被正确地绑定到某个实例上。关于描述符的定义，可以参考&lt;a href="https://docs.python.org/2/howto/descriptor.html"&gt;https://docs.python.org/2/howto/descriptor.html&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;总结 - 简单并不意味着正确&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;尽管大家实现装饰器所用的方法通常都很简单，但这并不意味着它们一定是正确的并且始终能正常工作。&lt;/p&gt;
&lt;p&gt;如同上面我们所看到的，&lt;code&gt;functools.wraps()&lt;/code&gt;可以帮我们解决&lt;code&gt;__name__&lt;/code&gt;和&lt;code&gt;__doc__&lt;/code&gt; 的问题，但对于获取函数的参数（&lt;code&gt;argument&lt;/code&gt;）或源代码（&lt;code&gt;source code&lt;/code&gt;）则束手无策。&lt;/p&gt;
&lt;p&gt;以上问题，&lt;a href="https://github.com/GrahamDumpleton/wrapt"&gt;wrapt&lt;/a&gt;都可以帮忙解决，详细用法可参考其官方文档：&lt;a href="http://wrapt.readthedocs.org"&gt;http://wrapt.readthedocs.org&lt;/a&gt;&lt;/p&gt;</summary><category term="Python"></category><category term="装饰器"></category></entry></feed>