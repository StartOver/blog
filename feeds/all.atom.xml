<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>startover's blog</title><link href="http://startover.github.io/" rel="alternate"></link><link href="http://startover.github.io/feeds/all.atom.xml" rel="self"></link><id>http://startover.github.io/</id><updated>2016-09-14T21:10:00+08:00</updated><entry><title>Python 程序员的 Golang 学习指南（V）: 测试篇</title><link href="http://startover.github.io/articles/2016/09/14/golang-for-pythonistas-testing/" rel="alternate"></link><published>2016-09-14T21:10:00+08:00</published><author><name>startover</name></author><id>tag:startover.github.io,2016-09-14:articles/2016/09/14/golang-for-pythonistas-testing/</id><summary type="html">&lt;p&gt;这篇文章我们介绍下 Go 语言中如何进行测试。&lt;/p&gt;
&lt;h2&gt;单元测试&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;功能测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go 语言内置测试框架，其通过 testing 包以及 go test 命令来提供测试功能。&lt;/p&gt;
&lt;p&gt;假设我们现在需要测试 stringutil.go，内容如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Package stringutil contains utility functions for working with strings.&lt;/span&gt;
&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;stringutil&lt;/span&gt;

&lt;span class="c1"&gt;// Reverse returns its argument string reversed rune-wise left to right.&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;Reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nb"&gt;rune&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那我们的测试用例可以写成下面这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;stringutil&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;testing&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;TestReverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;testing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;in&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;want&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello, world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dlrow ,olleH&amp;quot;&lt;/span&gt;
    &lt;span class="nx"&gt;got&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;Reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;got&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;want&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Reverse(%q) == %q, want %q&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;in&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;got&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;want&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行 &lt;code&gt;go test -v&lt;/code&gt;，得到如下输出：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;=== RUN   TestReverse
--- PASS: TestReverse (0.00s)
PASS
ok      command-line-arguments  0.001s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;编写测试代码需&lt;strong&gt;遵循以下原则&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;文件名必须是 _test.go 结尾的，这样在执行 go test 的时候才会执行到相应的代码&lt;/li&gt;
&lt;li&gt;你必须 import testing 这个包&lt;/li&gt;
&lt;li&gt;所有的测试用例函数必须是 Test 开头&lt;/li&gt;
&lt;li&gt;测试用例会按照源代码中写的顺序依次执行&lt;/li&gt;
&lt;li&gt;测试函数 TestXxx() 的参数是 testing.T，我们可以使用该类型来记录错误或者是测试状态&lt;/li&gt;
&lt;li&gt;测试格式：func TestXxx (t *testing.T), Xxx 部分可以为任意的字母数字的组合，但是首字母不能是小写字母[a-z]，例如 Testintdiv 是错误的函数名。&lt;/li&gt;
&lt;li&gt;函数中通过调用 testing.T 的 Error, Errorf, FailNow, Fatal, FatalIf 方法，说明测试不通过，调用 Log 方法用来记录测试的信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;基准测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编写基准测试与功能测试类似，这里不做赘速，代码示例如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;stringutil&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;testing&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;BenchmarkReverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;testing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                                                                                                                                        
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;in&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello, world&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;Reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;表驱动测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编写测试代码时，一个较好的办法是把测试的输入数据和期望的结果写在一起组成一个数据表：表中的每条记录都是一个含有输入和期望值的完整测试用例，有时还可以结合像测试名字这样的额外信息来让测试输出更多的信息。这就是&lt;strong&gt;表驱动测试&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Go 语言的 struct 字面值语法让我们可以轻松写出表驱动测试，代码示例如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;stringutil&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;testing&amp;quot;&lt;/span&gt; 

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;TestTableReverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;testing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;in&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;want&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;}{&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dlrow ,olleH&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, 世界&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;界世 ,olleH&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;got&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;Reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;got&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;want&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Reverse(%q) == %q, want %q&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;in&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;got&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;want&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;测试覆盖率&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;执行 &lt;code&gt;go test -v -cover&lt;/code&gt; 可以得到代码覆盖率的统计信息，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go &lt;span class="nb"&gt;test&lt;/span&gt; -v -cover
&lt;span class="o"&gt;===&lt;/span&gt; RUN   TestReverse
--- PASS: TestReverse &lt;span class="o"&gt;(&lt;/span&gt;0.00s&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;===&lt;/span&gt; RUN   TestTableReverse
--- PASS: TestTableReverse &lt;span class="o"&gt;(&lt;/span&gt;0.00s&lt;span class="o"&gt;)&lt;/span&gt;
PASS
coverage: 100.0% of statements
ok      github.com/startover/test/testing   0.004s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此外，&lt;code&gt;go test&lt;/code&gt; 还可以将代码覆盖率的统计信息保存到某个文件中，这个文件可以被 &lt;code&gt;cover&lt;/code&gt; 工具解析。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go &lt;span class="nb"&gt;test&lt;/span&gt; -coverprofile&lt;span class="o"&gt;=&lt;/span&gt;cover.out
$ go tool cover -func&lt;span class="o"&gt;=&lt;/span&gt;cover.out
github.com/startover/test/testing/stringutil.go:5:  Reverse     100.0%
total:                          &lt;span class="o"&gt;(&lt;/span&gt;statements&lt;span class="o"&gt;)&lt;/span&gt;    100.0%
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;BDD 测试&lt;/h2&gt;
&lt;p&gt;Go 语言比较主流的 BDD 测试框架主要有：&lt;a href="https://github.com/smartystreets/goconvey"&gt;GoConvey&lt;/a&gt; 和 &lt;a href="https://github.com/onsi/ginkgo"&gt;Ginkgo&lt;/a&gt;。下面让我们感受下 BDD 风格的测试代码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/smartystreets/goconvey"&gt;GoConvey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;stringutil&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;testing&amp;quot;&lt;/span&gt;

    &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;github.com/smartystreets/goconvey/convey&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;TestSpec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;testing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// Only pass t into top-level Convey calls&lt;/span&gt;
    &lt;span class="nx"&gt;Convey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Given some ASCII and UTF8 strings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;in&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;want&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello, world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dlrow ,olleH&amp;quot;&lt;/span&gt;
        &lt;span class="nx"&gt;Convey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The value should be equal the reversed one&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;got&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;Reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;So&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;got&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ShouldEqual&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;want&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/onsi/ginkgo"&gt;Ginkgo&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/onsi/gomega"&gt;Gomega&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;stringutil_test&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;github.com/golang/example/stringutil&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;github.com/onsi/ginkgo&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;github.com/onsi/gomega&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;StringutilTest&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;in&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;want&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;

    &lt;span class="nx"&gt;BeforeEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;in&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;want&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello, world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dlrow ,olleH&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="nx"&gt;Describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;With ASCII and UTF8 strings defined&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Reverse the give strings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;It&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;should be reversed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;got&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;Reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;Expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;got&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;To&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;want&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;完整的代码示例见：&lt;a href="https://github.com/startover/testing"&gt;https://github.com/startover/testing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;相关链接：&lt;br /&gt;
&lt;a href="https://talks.golang.org/2014/testing.slide#1"&gt;https://talks.golang.org/2014/testing.slide#1&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://nathany.com/go-testing-toolbox/"&gt;https://nathany.com/go-testing-toolbox/&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://codethoughts.info/go/2015/04/05/how-to-test-go-code/"&gt;http://codethoughts.info/go/2015/04/05/how-to-test-go-code/&lt;/a&gt;&lt;/p&gt;</summary><category term="Golang"></category><category term="Python"></category></entry><entry><title>Python 程序员的 Golang 学习指南（IV）: 包管理篇</title><link href="http://startover.github.io/articles/2016/09/07/golang-for-pythonistas-package/" rel="alternate"></link><published>2016-09-07T10:24:00+08:00</published><author><name>startover</name></author><id>tag:startover.github.io,2016-09-07:articles/2016/09/07/golang-for-pythonistas-package/</id><summary type="html">&lt;p&gt;在&lt;a href="http://startover.github.io/articles/2016/08/15/golang-for-pythonistas/"&gt;第一篇文章&lt;/a&gt;我们有提到，Golang 官方并没有推荐最佳的包管理方案，对于像我这样习惯了 Python 包管理的开发者，自然还是希望有像 pip 一样好用的工具，帮助我们进行依赖管理，下面就让我们对 Golang 的包管理机制一探究竟。&lt;/p&gt;
&lt;h2&gt;Golang 包管理机制&lt;/h2&gt;
&lt;p&gt;Go 语言的包管理系统是去中心化的，我们可以通过 &lt;code&gt;go get&lt;/code&gt; 命令获取存放在远程仓库的代码协议。实际上，&lt;code&gt;go get&lt;/code&gt; 支持以下 VCS 协议：&lt;/p&gt;
&lt;table class="table table-bordered"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;主命令&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mercurial&lt;/td&gt;
&lt;td&gt;hg&lt;/td&gt;
&lt;td&gt;Mercurial是一种轻量级分布式版本控制系统，采用Python语言实现，易于学习和使用，扩展性强。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Git&lt;/td&gt;
&lt;td&gt;git&lt;/td&gt;
&lt;td&gt;Git最开始是Linux Torvalds为了帮助管理 Linux 内核开发而开发的一个开源的分布式版本控制软件。但现在已被广泛使用。它是被用来进行有效、高速的各种规模项目的版本管理。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Subversion&lt;/td&gt;
&lt;td&gt;svn&lt;/td&gt;
&lt;td&gt;Subversion是一个版本控制系统，也是第一个将分支概念和功能纳入到版本控制模型的系统。但相对于Git和Mercurial而言，它只算是传统版本控制系统的一员。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bazaar&lt;/td&gt;
&lt;td&gt;bzr&lt;/td&gt;
&lt;td&gt;Bazaar是一个开源的分布式版本控制系统。但相比而言，用它来作为VCS的项目并不多。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;比如，我们现在需要获取 godep 这个项目，可以执行如下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go get github.com/tools/godep
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;需要指出的是，&lt;code&gt;go get&lt;/code&gt; 实际上执行了两个步骤：1. 下载源码包；2. 执行 &lt;code&gt;go install&lt;/code&gt;，如果只下载不安装，则需要指定 &lt;code&gt;-d&lt;/code&gt; 参数，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go get -d github.com/tools/godep
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;除了 &lt;code&gt;go get&lt;/code&gt;，Go 语言还提供了一个 &lt;code&gt;Workspace&lt;/code&gt; 的机制，即通过设定 GOPATH 环境变量，指定除了 GOROOT 所指定的目录之外，Go 代码所在的位置(也就是 &lt;code&gt;Workspace&lt;/code&gt; 的位置)。 一般来说，GOPATH 目录下会包含 pkg、src 和 bin 三个子目录，这三个目录各有用处。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bin 目录用于放置编译好的可执行文件，为了使得这里的可执行文件可以方便的运行， 可在 shell 中设置 PATH 环境变量。&lt;/li&gt;
&lt;li&gt;src 目录用于放置代码源文件，在进行 import 时，是使用这个位置作为根目录的。自己编写的代码也应该放在这下面。&lt;/li&gt;
&lt;li&gt;pkg 用来放置安装的包的链接对象(Object)的。这个概念有点类似于链接库，Go 会将编译出的可连接库放在这里， 方便编译时链接。不同的系统和处理器架构的对象会在 pkg 存放在不同的文件夹中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Golang 包管理现状&lt;/h2&gt;
&lt;p&gt;显然，通过 &lt;code&gt;go get&lt;/code&gt; 和 &lt;code&gt;Workspace&lt;/code&gt; 的方式并不足以解决项目依赖和版本依赖的问题，主要有以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第三方包的版本控制。如果没有明确指定依赖的第三方包的版本，团队开发很容易导入不一样的版本，导致项目无法正常运行。&lt;/li&gt;
&lt;li&gt;第三方包没有内容安全审计，很容易引入代码 Bug，这是泛中心化包管理普遍存在的问题。&lt;/li&gt;
&lt;li&gt;依赖的完整性无法校验，程序编译时无法保障百分百成功。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此，我们必须借助第三方工具来解决这些问题。&lt;/p&gt;
&lt;h2&gt;第三方解决方案&lt;/h2&gt;
&lt;p&gt;这里我从&lt;a href="https://github.com/golang/go/wiki/PackageManagementTools"&gt;官方推荐包管理工具&lt;/a&gt;中挑选了几个比较常用的工具：Godep, Govendor 以及 Glide，作下简单介绍。&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://github.com/tools/godep"&gt;Godep&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;godep save&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个命令做了以下几件事：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;查找项目中所用到的所有的第三方包。&lt;/li&gt;
&lt;li&gt;在项目目录下创建 Godeps 目录，Godeps/Godeps.json 是依赖文件，包括了 go 的版本，用到的第三方包的引入路径，版本号等信息，json 文件需要一并加入到版本控制里。&lt;/li&gt;
&lt;li&gt;所有依赖的第三方包的代码会被拷贝到 vendor/ 下，并且移除了 .git 这样的版本控制信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;godep restore&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当下载别人发布的项目时，如果下载的项目中只有 Godeps.json 文件，而没有包含第三方包，则可以使用 &lt;code&gt;godep restore&lt;/code&gt; 这个命令将所有的依赖包下载到 &lt;code&gt;$GOPATH&lt;/code&gt; 目录下，而不用一个一个去 &lt;code&gt;go get&lt;/code&gt;，还是很方便的。&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://github.com/kardianos/govendor"&gt;Govendor&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;govendor init&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;执行 &lt;code&gt;govendor init&lt;/code&gt; 会在根目录下生成一个 vendor 文件夹，以及 vendor/vendor.json，其中 vendor.json 类似 godep 工具中的描述文件版本的功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;govendor add +external&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;执行 &lt;code&gt;govendor add +external&lt;/code&gt; 会将所有依赖的第三方包的代码拷贝到 vendor 文件夹下，并且移除了 .git 这样的版本控制信息，测试所需依赖以及依赖项目的测试文件。与 &lt;code&gt;godep save&lt;/code&gt; 的功能类似。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;govendor fetch&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;执行 &lt;code&gt;govendor fetch&lt;/code&gt; 新增的第三方包直接被 get 到根目录的 vendor 文件夹下，不会与其它的项目混用第三方包，完美避免了多个项目同用同一个第三方包的不同版本问题。&lt;/p&gt;
&lt;p&gt;这样，我们只需对 vendor/vendor.json 进行版本控制，即可对第三包依赖关系进行控制。&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://github.com/Masterminds/glide"&gt;Glide&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;glide init&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;执行 &lt;code&gt;glide init&lt;/code&gt; 或 &lt;code&gt;glide create&lt;/code&gt; 会在项目根目录下生成一个 glide.yaml，这个文件用来记录项目用到的第三方包的依赖关系，并支持编辑修改。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;glide install&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;执行 &lt;code&gt;glide install&lt;/code&gt;，会把所有依赖的第三方包都下载到 vendor 文件夹下，并且会在 glide.yaml 中添加所有依赖的第三方包名称，以及在 glide.lock 文件中记录具体的版本管理信息。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;上面我们分别对 Godep, Govendor 以及 Glide 这三种工具做了简单的介绍，对于 Python 开发者，个人还是比较认同 Govendor 的方式，因为其很容易实现类似 Virtualenv 的模式，从而实现不同程序使用不同版本依赖的目的。&lt;/p&gt;
&lt;p&gt;当然，如果你是 Node.js 的开发者，可能对于 &lt;a href="https://github.com/tools/godep"&gt;Godep&lt;/a&gt; 有更加熟悉的感觉，而对于 Ruby 开发者，&lt;a href="https://github.com/mattn/gom"&gt;gom&lt;/a&gt; 会让你感到更加亲切。&lt;/p&gt;
&lt;p&gt;因此，针对第三方包管理工具的选择，现阶段还完全交由开发者做裁定，这里就“仁者见仁，智者见智”了。&lt;/p&gt;
&lt;p&gt;相关链接：&lt;br /&gt;
&lt;a href="http://www.infoq.com/cn/articles/golang-package-management"&gt;http://www.infoq.com/cn/articles/golang-package-management&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://io-meter.com/2014/07/30/go's-package-management/"&gt;https://io-meter.com/2014/07/30/go's-package-management/&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://github.com/golang/go/wiki/PackageManagementTools"&gt;https://github.com/golang/go/wiki/PackageManagementTools&lt;/a&gt;&lt;/p&gt;</summary><category term="Golang"></category><category term="Python"></category></entry><entry><title>Python 程序员的 Golang 学习指南（III）: 入门篇</title><link href="http://startover.github.io/articles/2016/08/30/golang-for-pythonistas-quickstart/" rel="alternate"></link><published>2016-08-30T13:44:00+08:00</published><author><name>startover</name></author><id>tag:startover.github.io,2016-08-30:articles/2016/08/30/golang-for-pythonistas-quickstart/</id><summary type="html">&lt;h2&gt;基础语法&lt;/h2&gt;
&lt;h4&gt;类型和关键字&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;类型&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// 基础类型
布尔类型: bool
整型: int8，uint8，int16，uint16，int32，uint32，int64，uint64，int，rune，byte，complex128， complex64，其中，byte 是 int8 的别名
浮点类型: float32 、 float64
复数类型: complex64 、 complex128
字符串: string
字符类型: rune（int32的别名）
错误类型: error

// 复合类型
指针（pointer）
数组（array）
切片（slice）
字典（map）
通道（chan）
结构体（struct）
接口（interface）
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;关键字&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;        &lt;span class="n"&gt;default&lt;/span&gt;      &lt;span class="n"&gt;func&lt;/span&gt;         &lt;span class="n"&gt;interface&lt;/span&gt;    &lt;span class="n"&gt;select&lt;/span&gt;
&lt;span class="n"&gt;case&lt;/span&gt;         &lt;span class="n"&gt;defer&lt;/span&gt;        &lt;span class="n"&gt;go&lt;/span&gt;           &lt;span class="nb"&gt;map&lt;/span&gt;          &lt;span class="n"&gt;struct&lt;/span&gt;
&lt;span class="n"&gt;chan&lt;/span&gt;         &lt;span class="k"&gt;else&lt;/span&gt;         &lt;span class="n"&gt;goto&lt;/span&gt;         &lt;span class="n"&gt;package&lt;/span&gt;      &lt;span class="n"&gt;switch&lt;/span&gt;
&lt;span class="n"&gt;const&lt;/span&gt;        &lt;span class="n"&gt;fallthrough&lt;/span&gt;  &lt;span class="k"&gt;if&lt;/span&gt;           &lt;span class="nb"&gt;range&lt;/span&gt;        &lt;span class="nb"&gt;type&lt;/span&gt;
&lt;span class="k"&gt;continue&lt;/span&gt;     &lt;span class="k"&gt;for&lt;/span&gt;          &lt;span class="kn"&gt;import&lt;/span&gt;       &lt;span class="nn"&gt;return&lt;/span&gt;       &lt;span class="nn"&gt;var&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;变量&lt;/h4&gt;
&lt;p&gt;Go 同其他语言不同的地方在于变量的类型在变量名的后面，不是 &lt;code&gt;int a&lt;/code&gt;，而是 &lt;code&gt;a int&lt;/code&gt;。至于为什么这么定义，Go 的&lt;a href="https://blog.golang.org/gos-declaration-syntax"&gt;官方博客&lt;/a&gt;有给出解释，有兴趣的可以参考下。&lt;/p&gt;
&lt;p&gt;变量定义语法如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="c1"&gt;// 或者&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="c1"&gt;// 同时定义多个变量&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
    &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// 同时给多个变量赋值&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;操作符&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;     &lt;span class="o"&gt;+=&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt;     &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;    &lt;span class="o"&gt;==&lt;/span&gt;    &lt;span class="o"&gt;!=&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="o"&gt;-=&lt;/span&gt;    &lt;span class="o"&gt;|=&lt;/span&gt;     &lt;span class="o"&gt;||&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;     &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;    &lt;span class="p"&gt;[&lt;/span&gt;    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;    &lt;span class="o"&gt;^&lt;/span&gt;     &lt;span class="o"&gt;*=&lt;/span&gt;    &lt;span class="o"&gt;^=&lt;/span&gt;     &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;    &lt;span class="o"&gt;/=&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&amp;lt;=&lt;/span&gt;    &lt;span class="o"&gt;++&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt;     &lt;span class="o"&gt;:=&lt;/span&gt;    &lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;%    &amp;gt;&amp;gt;    %=&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt;    &lt;span class="o"&gt;--&lt;/span&gt;    &lt;span class="o"&gt;!&lt;/span&gt;     &lt;span class="kc"&gt;...&lt;/span&gt;   &lt;span class="m"&gt;.&lt;/span&gt;    &lt;span class="o"&gt;:&lt;/span&gt;
     &lt;span class="o"&gt;&amp;amp;^&lt;/span&gt;          &lt;span class="o"&gt;&amp;amp;^=&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;控制结构&lt;/h4&gt;
&lt;p&gt;Go 语言支持如下的几种流程控制语句:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;条件语句，对应的关键字为 if、else 和 else if；&lt;/li&gt;
&lt;li&gt;选择语句，对应的关键字为 switch、case 和 select；&lt;/li&gt;
&lt;li&gt;循环语句，对应的关键字为 for 和 range；&lt;/li&gt;
&lt;li&gt;跳转语句，对应的关键字为 goto。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;值得一提的是，Go 语言并不支持 do 或者 while 关键字，而是对 for 关键字做了增强，以实现类似的效果，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 实现无限循环，慎用！&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;常用内置函数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;len：计算（字符串，数组或者切片，map）长度&lt;/li&gt;
&lt;li&gt;cap：计算（数组或者切片，map）容量&lt;/li&gt;
&lt;li&gt;close：关闭通道&lt;/li&gt;
&lt;li&gt;append：追加内容到切片&lt;/li&gt;
&lt;li&gt;copy：拷贝数组/切片内容到另一个数组/切片&lt;/li&gt;
&lt;li&gt;delete：用于删除 map 的元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;array, slice 和 map&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// array&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// 等价于 a := [...]int{ 1, 2, 3 }&lt;/span&gt;

&lt;span class="c1"&gt;// slice&lt;/span&gt;
&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 创建一个长度为 3 的 slice&lt;/span&gt;
&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 向 slice 追加元素&lt;/span&gt;
&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// map&lt;/span&gt;
&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 使用前必须先初始化&lt;/span&gt;
&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;golang&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;关于 array, slice 和 map 的更多惯用法，有一篇&lt;a href="https://se77en.cc/2014/06/30/array-slice-map-and-set-in-golang/"&gt;文章&lt;/a&gt;介绍的挺详细，有兴趣的可以看看。&lt;/p&gt;
&lt;h4&gt;函数&lt;/h4&gt;
&lt;p&gt;Go 语言的函数有如下特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不定参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于 Go 语言不支持函数重载（具体原因见 &lt;a href="https://golang.org/doc/faq#overloading"&gt;Go Language FAQ&lt;/a&gt;），但我们可以通过不定参数实现类似的效果。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// TODO&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 可通过如下方式调用&lt;/span&gt;
&lt;span class="nx"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;多返回值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与 C、C++ 和 Java 等开发语言的一个极大不同在于，Go 语言的函数或者成员的方法可以有多
个返回值，这个特性能够使我们写出比其他语言更优雅、更简洁的代码。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;File&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// 我们可以通过下划线（_）来忽略某个返回值&lt;/span&gt;
&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;匿名函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;匿名函数是指不需要定义函数名的一种函数实现方式，它并不是一个新概念，最早可以回溯
到 1958 年的 Lisp 语言。但是由于各种原因，C 和 C++ 一直都没有对匿名函数给以支持，其他的各
种语言，比如 JavaScript、C# 和 Objective-C 等语言都提供了匿名函数特性，当然也包含Go语言。&lt;/p&gt;
&lt;p&gt;匿名函数由一个不带函数名的函数声明和函数体组成，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;匿名函数可以直接赋值给一个变量或者直接执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 花括号后直接跟参数列表表示函数调用&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;闭包&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;闭包是可以包含自由(未绑定到特定对象)变量的代码块，这些变量不在这个代码块内或者
任何全局上下文中定义，而是在定义代码块的环境中定义。要执行的代码块(由于自由变量包含
在代码块中，所以这些自由变量以及它们引用的对象没有被释放)为自由变量提供绑定的计算环
境(作用域)。&lt;/p&gt;
&lt;p&gt;Go 的匿名函数就是一个闭包。我们来看一个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;i, j: %d, %d\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;
    &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;程序输出如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;i, j: 10, 5
i, j: 10, 10
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;错误处理&lt;/h4&gt;
&lt;p&gt;Go 语言追求简洁优雅，所以，Go 语言不支持传统的 &lt;code&gt;try...catch...finally&lt;/code&gt; 这种异常，因为 Go 语言的设计者们认为，将异常与控制结构混在一起会很容易使得代码变得混乱。因为开发者很容易滥用异常，甚至一个小小的错误都抛出一个异常。在 Go 语言中，使用多值返回来返回错误。不要用异常代替错误，更不要用来控制流程。在极个别的情况下，也就是说，遇到真正的异常的情况下（比如除数为0了），才使用 Go 中引入的Exception处理：defer, panic, recover。&lt;/p&gt;
&lt;p&gt;用法如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;recovered:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;recover&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;
    &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;not good&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;关于 Go 语言的错误处理机制和传统的 &lt;code&gt;try...catch...finally&lt;/code&gt; 异常机制孰优孰劣，属于仁者见仁，智者见智，这里不做赘速。有兴趣的同学可以去看看知乎上的讨论：&lt;a href="https://www.zhihu.com/question/27158146"&gt;Go 语言的错误处理机制是一个优秀的设计吗？&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;面向对象 -&amp;gt; 一切皆类型&lt;/h2&gt;
&lt;p&gt;Python 推崇“一切皆对象”，而在 Go 语言中，类型才是一等公民。&lt;/p&gt;
&lt;p&gt;我们可以这样定义一个结构体：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Name&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;First&lt;/span&gt;  &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;Middle&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;Last&lt;/span&gt;   &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同样也可以定义基础类型：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;SimpleName&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还能给任意类型定义方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;SimpleName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;String&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// 或者&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;NoWay&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Golang VS Python&lt;/h2&gt;
&lt;p&gt;最后我们通过几个例子来比较一下 Golang 与 Python 的一些基本用法，如下：&lt;/p&gt;
&lt;h4&gt;生成器（Generator）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Python 版本&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;done&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Golang 版本&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;
            &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;装饰器（Decorator）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Python 版本&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urlparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlparse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parse_qs&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;BaseHTTPServer&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BaseHTTPRequestHandler&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;auth_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;checkuser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_qs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urlparse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unknown user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;checkuser&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;myHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseHTTPRequestHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@auth_required&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;!&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;myHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Golang 版本&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hiHandler&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;authRequired&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hi, %v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FormValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;authRequired&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HandlerFunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HandlerFunc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FormValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;unknown user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StatusForbidden&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/hi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hiHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:8080&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;猴子补丁（Monkey patching）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Python 版本&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_hi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hi, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;usr&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;unknown user &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;usr&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;auth_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auth_url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sayhitest&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# Test authenticated user&lt;/span&gt;
    &lt;span class="nb"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;say_hi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Test unauthenticated user&lt;/span&gt;
    &lt;span class="nb"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;say_hi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;sayhitest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Golang 版本&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;unknown user %v\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hi, %v\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;authURL&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;authURL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StatusCode&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StatusOK&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;testSayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;John&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;John&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;testSayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;相关链接：&lt;br /&gt;
&lt;a href="https://blog.golang.org/gos-declaration-syntax"&gt;https://blog.golang.org/gos-declaration-syntax&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://se77en.cc/2014/06/30/array-slice-map-and-set-in-golang/"&gt;https://se77en.cc/2014/06/30/array-slice-map-and-set-in-golang/&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://golang.org/doc/faq#overloading"&gt;https://golang.org/doc/faq#overloading&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://www.zhihu.com/question/27158146"&gt;https://www.zhihu.com/question/27158146&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://talks.golang.org/2013/go4python.slide"&gt;https://talks.golang.org/2013/go4python.slide&lt;/a&gt;  &lt;/p&gt;</summary><category term="Golang"></category><category term="Python"></category></entry><entry><title>Python 程序员的 Golang 学习指南（II）: 开发环境搭建</title><link href="http://startover.github.io/articles/2016/08/22/golang-for-pythonistas-environment/" rel="alternate"></link><published>2016-08-22T16:10:00+08:00</published><author><name>startover</name></author><id>tag:startover.github.io,2016-08-22:articles/2016/08/22/golang-for-pythonistas-environment/</id><summary type="html">&lt;p&gt;&lt;a href="http://startover.github.io/articles/2016/08/15/golang-for-pythonistas/"&gt;上一篇文章&lt;/a&gt;我们已经对 Golang 有了初步的了解，这篇主要介绍如何在 Ubuntu 14.04 上搭建 Golang 开发环境。&lt;/p&gt;
&lt;h2&gt;安装 Golang&lt;/h2&gt;
&lt;p&gt;这里就按照&lt;a href="https://golang.org/doc/install#install"&gt;官方文档&lt;/a&gt;进行安装即可，如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载并解压安装包到指定目录&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget https://storage.googleapis.com/golang/go1.6.3.linux-amd64.tar.gz
$ tar -C /usr/local -xzf go1.6.3.linux-amd64.tar.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;设置 PATH&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;export PATH=&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;:/usr/local/go/bin&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc
$ &lt;span class="nb"&gt;source&lt;/span&gt; ~/.bashrc
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;验证安装&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go version
go version go1.6.3 linux/amd64
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;环境变量设置&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;export GOROOT=/usr/local/go&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;export GOPATH=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/go&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc
$ &lt;span class="nb"&gt;source&lt;/span&gt; ~/.bashrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中，GOROOT 为 Golang 的安装目录，只有当 Golang 安装到除 /usr/local 之外的路径时需要设置，反之则不用设置，GOPATH 是 Golang 的开发目录，详细可参考&lt;a href="https://golang.org/cmd/go/#hdr-GOPATH_environment_variable"&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;开发工具&lt;/h2&gt;
&lt;p&gt;工欲善其事，必先利其器，作为一名伪 VIMer，这里主要介绍下如何在 Vim 下配置 Golang 开发环境。&lt;/p&gt;
&lt;p&gt;由于之前一直使用 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 作为 Python 开发环境，而 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 已经集成了当前使用最为广泛的用于搭建 Golang 开发环境的 vim 插件 &lt;a href="https://github.com/fatih/vim-go"&gt;vim-go&lt;/a&gt;，只是默认没有开启，需要我们手动进行相关设置。 &lt;/p&gt;
&lt;p&gt;在 &lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt; 中开启 Golang 语言的支持，非常简单，如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改 ~/.vimrc.bundles（开启 golang 支持，并修改 vim-go 的默认配置，增加快捷键配置等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;let&lt;/span&gt; g:bundle_groups&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;javascript&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;markdown&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;html&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;css&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;tmux&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;beta&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;golang&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="s2"&gt;&amp;quot; vimgo {{{&lt;/span&gt;
&lt;span class="s2"&gt;    let g:go_highlight_functions = 1&lt;/span&gt;
&lt;span class="s2"&gt;    let g:go_highlight_methods = 1&lt;/span&gt;
&lt;span class="s2"&gt;    let g:go_highlight_structs = 1&lt;/span&gt;
&lt;span class="s2"&gt;    let g:go_highlight_operators = 1&lt;/span&gt;
&lt;span class="s2"&gt;    let g:go_highlight_build_constraints = 1&lt;/span&gt;

&lt;span class="s2"&gt;    let g:go_fmt_fail_silently = 1&lt;/span&gt;
&lt;span class="s2"&gt;    let g:go_fmt_command = &amp;quot;&lt;/span&gt;goimports&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;    let g:syntastic_go_checkers = [&amp;#39;golint&amp;#39;, &amp;#39;govet&amp;#39;, &amp;#39;errcheck&amp;#39;]&lt;/span&gt;

&lt;span class="s2"&gt;    &amp;quot;&lt;/span&gt; vim-go custom mappings
    au FileType go nmap &amp;lt;Leader&amp;gt;s &amp;lt;Plug&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;go-implements&lt;span class="o"&gt;)&lt;/span&gt;
    au FileType go nmap &amp;lt;Leader&amp;gt;i &amp;lt;Plug&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;go-info&lt;span class="o"&gt;)&lt;/span&gt;
    au FileType go nmap &amp;lt;Leader&amp;gt;gd &amp;lt;Plug&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;go-doc&lt;span class="o"&gt;)&lt;/span&gt;
    au FileType go nmap &amp;lt;Leader&amp;gt;gv &amp;lt;Plug&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;go-doc-vertical&lt;span class="o"&gt;)&lt;/span&gt;
    au FileType go nmap &amp;lt;leader&amp;gt;r &amp;lt;Plug&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;go-run&lt;span class="o"&gt;)&lt;/span&gt;
    au FileType go nmap &amp;lt;leader&amp;gt;b &amp;lt;Plug&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;go-build&lt;span class="o"&gt;)&lt;/span&gt;
    au FileType go nmap &amp;lt;leader&amp;gt;t &amp;lt;Plug&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;go-test&lt;span class="o"&gt;)&lt;/span&gt;
    au FileType go nmap &amp;lt;leader&amp;gt;c &amp;lt;Plug&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;go-coverage&lt;span class="o"&gt;)&lt;/span&gt;
    au FileType go nmap &amp;lt;Leader&amp;gt;ds &amp;lt;Plug&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;go-def-split&lt;span class="o"&gt;)&lt;/span&gt;
    au FileType go nmap &amp;lt;Leader&amp;gt;dv &amp;lt;Plug&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;go-def-vertical&lt;span class="o"&gt;)&lt;/span&gt;
    au FileType go nmap &amp;lt;Leader&amp;gt;dt &amp;lt;Plug&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;go-def-tab&lt;span class="o"&gt;)&lt;/span&gt;
    au FileType go nmap &amp;lt;Leader&amp;gt;e &amp;lt;Plug&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;go-rename&lt;span class="o"&gt;)&lt;/span&gt;
    au FileType go nnoremap &amp;lt;leader&amp;gt;gr :GoRun %&amp;lt;CR&amp;gt;
&lt;span class="s2"&gt;&amp;quot; }}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 Vim 内执行 &lt;code&gt;:PlugInstall&lt;/code&gt;，安装 &lt;a href="https://github.com/fatih/vim-go"&gt;vim-go&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 Vim 内执行 &lt;code&gt;:GoInstallBinaries&lt;/code&gt;，下载并安装 &lt;a href="https://github.com/fatih/vim-go"&gt;vim-go&lt;/a&gt; 依赖的二进制工具，&lt;code&gt;goimports&lt;/code&gt;，&lt;code&gt;golint&lt;/code&gt; 等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装 &lt;a href="https://github.com/jstemmer/gotags"&gt;gotags&lt;/a&gt;，使 &lt;code&gt;tagbar&lt;/code&gt; 配置生效。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go get -u github.com/jstemmer/gotags
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们来看一下最终效果：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Image of Golang Environment in Vim" src="http://startover.github.io/images/golang-for-pythonistas-environment.png" /&gt;&lt;/p&gt;
&lt;h2&gt;编写第一个程序&lt;/h2&gt;
&lt;p&gt;进入工作目录，新建文件 &lt;code&gt;hello.go&lt;/code&gt;，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;GOPATH&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;
&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, World！&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行程序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go run hello.go
Hello, World！
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Golang"></category><category term="Python"></category></entry><entry><title>Python 程序员的 Golang 学习指南（I）: Go 之初体验</title><link href="http://startover.github.io/articles/2016/08/15/golang-for-pythonistas/" rel="alternate"></link><published>2016-08-15T12:00:00+08:00</published><author><name>startover</name></author><id>tag:startover.github.io,2016-08-15:articles/2016/08/15/golang-for-pythonistas/</id><summary type="html">&lt;h2&gt;Go 语言简介&lt;/h2&gt;
&lt;p&gt;Go，又称 golang，是 Google 开发的一种静态强类型，编译型，并发型，并具有垃圾回收功能的编程语言。&lt;/p&gt;
&lt;p&gt;Go 语言于2009年11月正式宣布推出，自2012年发布1.0，最新稳定版1.7。目前，Go的相关工具和生态已逐渐趋于完善，也不乏重量级项目，如 Docker, Kubernetes, Etcd, InfluxDB 等。&lt;/p&gt;
&lt;h2&gt;Go 语言能解决什么样的问题&lt;/h2&gt;
&lt;p&gt;同绝大多数通用型编程语言相比，Go 语言更多的是为了解决我们在构建大型服务器软件过程中所遇到的软件工程方面的问题而设计的。乍看上去，这么讲可能会让人感觉 Go 非常无趣且工业化，但实际上，在设计过程中就着重于清晰和简洁，以及较高的可组合性，最后得到的反而会是一门使用起来效率高而且很有趣的编程语言，很多程序员都会发现，它有极强的表达力而且功能非常强大。&lt;/p&gt;
&lt;p&gt;总结为以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;清晰的依赖关系&lt;/li&gt;
&lt;li&gt;清晰的语法&lt;/li&gt;
&lt;li&gt;清晰的语义&lt;/li&gt;
&lt;li&gt;偏向组合而不是继承&lt;/li&gt;
&lt;li&gt;提供简单的编程模型（垃圾回收、并发）&lt;/li&gt;
&lt;li&gt;强大的内置工具（gofmt、godoc、gofix等）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;建议有兴趣的同学看看 &lt;a href="http://www.oschina.net/translate/go-at-google-language-design-in-the-service-of-software-engineering"&gt;Go在谷歌：以软件工程为目的的语言设计&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;Go 语言相对 Python 有哪些优势&lt;/h2&gt;
&lt;p&gt;这里引用一段&lt;a href="https://www.zhihu.com/question/21409296"&gt;知乎&lt;/a&gt;上某大牛的回答，如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;部署简单&lt;/strong&gt;。Go 编译生成的是一个静态可执行文件，除了 glibc 外没有其他外部依赖。这让部署变得异常方便：目标机器上只需要一个基础的系统和必要的管理、监控工具，完全不需要操心应用所需的各种包、库的依赖关系，大大减轻了维护的负担。这和 Python 有着巨大的区别。由于历史的原因，Python 的部署工具生态相当混乱【比如 setuptools, distutils, pip, buildout 的不同适用场合以及兼容性问题】。官方 PyPI 源又经常出问题，需要搭建私有镜像，而维护这个镜像又要花费不少时间和精力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;并发性好&lt;/strong&gt;。Goroutine 和 channel 使得编写高并发的服务端软件变得相当容易，很多情况下完全不需要考虑锁机制以及由此带来的各种问题。单个 Go 应用也能有效的利用多个 CPU 核，并行执行的性能好。这和 Python 也是天壤之比。多线程和多进程的服务端程序编写起来并不简单，而且由于全局锁 GIL 的原因，多线程的 Python 程序并不能有效利用多核，只能用多进程的方式部署；如果用标准库里的 multiprocessing 包又会对监控和管理造成不少的挑战【我们用的 supervisor 管理进程，对 fork 支持不好】。部署 Python 应用的时候通常是每个 CPU 核部署一个应用，这会造成不少资源的浪费，比如假设某个 Python 应用启动后需要占用 100MB 内存，而服务器有 32 个 CPU 核，那么留一个核给系统、运行 31 个应用副本就要浪费 3GB 的内存资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;良好的语言设计&lt;/strong&gt;。从学术的角度讲 Go 语言其实非常平庸，不支持许多高级的语言特性；但从工程的角度讲，Go 的设计是非常优秀的：规范足够简单灵活，有其他语言基础的程序员都能迅速上手。更重要的是 Go 自带完善的工具链，大大提高了团队协作的一致性。比如 gofmt 自动排版 Go 代码，很大程度上杜绝了不同人写的代码排版风格不一致的问题。把编辑器配置成在编辑存档的时候自动运行 gofmt，这样在编写代码的时候可以随意摆放位置，存档的时候自动变成正确排版的代码。此外还有 gofix, govet 等非常有用的工具。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;执行性能好&lt;/strong&gt;。虽然不如 C 和 Java，但通常比原生 Python 应用还是高一个数量级的，适合编写一些瓶颈业务。内存占用也非常省。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从个人对 Golang 的初步使用来说，体验还是相当不错的，但是也有下面几点需要注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;驼峰式命名风格（依据首字母大小写来决定其是否能被其他包引用），但我更喜欢 Python 的小写字母加下划线命名风格。&lt;/li&gt;
&lt;li&gt;没有好用的包管理器，Golang 官方也没有推荐最佳的包管理方案，目前公认的比较好用的有 Godeps, Govendor 及 Glide，而 Python 的包管理器 pip 已形成自己的一套标准。&lt;/li&gt;
&lt;li&gt;多行字符串的变量声明需要用反引号（`），Python 里是三个双引号（"""），参考&lt;a href="http://stackoverflow.com/questions/7933460/how-do-you-write-multiline-strings-in-go"&gt;http://stackoverflow.com/questions/7933460/how-do-you-write-multiline-strings-in-go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Golang 中的类型匹配是很严格的，不同的类型之间通常需要手动转换，所以在字符串拼接时往往需要对整型进行显式转换，如 &lt;code&gt;fmt.Println("num: " + strconv.Itoa(1))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Golang 语言语法里的语法糖并不多，如在 Python 中很流行的 map, reduce, range 等，在 Golang 里都没有得到支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，推荐阅读 &lt;a href="http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/"&gt;Golang 新手开发者要注意的陷阱和常见错误&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;学习资料推荐&lt;/h2&gt;
&lt;p&gt;建议先把 Go 的&lt;a href="https://golang.org/doc/"&gt;官方文档&lt;/a&gt;过一遍，主要有以下几项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tour.golang.org/welcome/1"&gt;A Tour of Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://golang.org/doc/code.html"&gt;How to write Go code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://golang.org/doc/effective_go.html"&gt;Effective Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://golang.org/ref/spec"&gt;Language Specification&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;官方文档看完后，基本也算入门了，这时候可以看看 &lt;a href="https://gobyexample.com/"&gt;Go 的示例代码&lt;/a&gt;，或者去 &lt;a href="https://projecteuler.net/"&gt;Project Euler&lt;/a&gt; 刷刷题。&lt;/p&gt;
&lt;p&gt;当然也可以去知乎看看大牛们都是如何学习的，链接 &lt;a href="https://www.zhihu.com/question/23486344"&gt;https://www.zhihu.com/question/23486344&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;虽然 Go 有很多被诟病的地方，比如 GC 和对错误的处理方式，但没有任何语言是完美的，从实用角度来讲，Go 有着不输于 Python 的开发效率，完善的第三方工具，以及强大的社区支持，这些就足够了。&lt;/p&gt;
&lt;p&gt;相关链接：&lt;br /&gt;
&lt;a href="https://golang.org/doc/"&gt;https://golang.org/doc/&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://talks.golang.org/2012/splash.article"&gt;https://talks.golang.org/2012/splash.article&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://www.zhihu.com/question/21409296"&gt;https://www.zhihu.com/question/21409296&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://www.zhihu.com/question/23486344"&gt;https://www.zhihu.com/question/23486344&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/7933460/how-do-you-write-multiline-strings-in-go"&gt;http://stackoverflow.com/questions/7933460/how-do-you-write-multiline-strings-in-go&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/"&gt;http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.oschina.net/translate/go-at-google-language-design-in-the-service-of-software-engineering"&gt;http://www.oschina.net/translate/go-at-google-language-design-in-the-service-of-software-engineering&lt;/a&gt;&lt;/p&gt;</summary><category term="Golang"></category><category term="Python"></category></entry><entry><title>Cloudinsight Agent 与 Cacti 集成</title><link href="http://startover.github.io/articles/2016/05/13/cloudinsight-cacti-integration/" rel="alternate"></link><published>2016-05-13T18:00:00+08:00</published><author><name>startover</name></author><id>tag:startover.github.io,2016-05-13:articles/2016/05/13/cloudinsight-cacti-integration/</id><summary type="html">&lt;h2&gt;原理介绍&lt;/h2&gt;
&lt;p&gt;Cloudinsight Agent 通过 &lt;a href="https://pypi.python.org/pypi/python-rrdtool"&gt;python-rrdtool&lt;/a&gt; 读取 Cacti 生成的 rrd 文件（在 cacti 根目录的 rra 文件夹下），并将其中的数据解析后上传至 &lt;a href="http://cloudinsight.oneapm.com/"&gt;Cloudinsight&lt;/a&gt; 进行可视化。&lt;/p&gt;
&lt;h2&gt;Cacti 安装配置&lt;/h2&gt;
&lt;p&gt;由于 Cacti 安装配置较为繁琐，这里通过 Docker 容器的方式来解决这个问题。&lt;/p&gt;
&lt;p&gt;然而，Cloudinsight Agent 需要读取 Cacti 生成的 rrd 文件，所以我们需要将这部分文件挂载到系统主机上。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建挂载文件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mkdir -p /var/lib/cacti/rra
$ sudo wget -O /etc/mysql/mysqld.cnf https://raw.githubusercontent.com/cloudinsight/cloudinsight-docker-cacti/master/mysqld.cnf
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;挂载文件权限设置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于挂载文件默认是root用户访问权限，需将其赋予容器内的 www-data 用户，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo chown -R 33:33 /var/lib/cacti
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;运行 Cacti 容器&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run -d --name docker-cacti &lt;span class="se"&gt;\&lt;/span&gt;
             -h docker-cacti &lt;span class="se"&gt;\&lt;/span&gt;
             -p &lt;span class="m"&gt;80&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
             -v /etc/mysql/mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf &lt;span class="se"&gt;\&lt;/span&gt;
             -v /var/lib/cacti/rra:/var/lib/cacti/rra &lt;span class="se"&gt;\&lt;/span&gt;
             -v /etc/localtime:/etc/localtime:ro &lt;span class="se"&gt;\&lt;/span&gt;
             quantumobject/docker-cacti
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Cloudinsight Agent 集成&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://cloud.oneapm.com/#/settings"&gt;安装&lt;/a&gt; Cloudinsight Agent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置 MySQL 访问权限&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker &lt;span class="nb"&gt;exec&lt;/span&gt; docker-cacti mysql -e &lt;span class="s2"&gt;&amp;quot;create user &amp;#39;oneapm&amp;#39;@&amp;#39;%&amp;#39; identified by &amp;#39;oneapm&amp;#39;;&amp;quot;&lt;/span&gt; -uroot -pmysqlpsswd
$ docker &lt;span class="nb"&gt;exec&lt;/span&gt; docker-cacti mysql -e &lt;span class="s2"&gt;&amp;quot;grant select on cacti.* to &amp;#39;oneapm&amp;#39;@&amp;#39;%&amp;#39;;&amp;quot;&lt;/span&gt; -uroot -pmysqlpsswd
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;安装 RRDTool 依赖包&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于 Cacti 运行在 docker 容器内，为确保 &lt;a href="https://pypi.python.org/pypi/python-rrdtool"&gt;python-rrdtool&lt;/a&gt; 能够正常运行，需要在本机安装相关依赖。&lt;/p&gt;
&lt;p&gt;Debian/Ubuntu&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install rrdtool
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;CentOS/Redhat&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum -y install rrdtool*
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;配置 Cacti 监控&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker inspect --format &lt;span class="s1"&gt;&amp;#39;{{ .NetworkSettings.IPAddress }}&amp;#39;&lt;/span&gt; docker-cacti
172.17.0.2
$ &lt;span class="nb"&gt;cd&lt;/span&gt; /etc/cloudinsight-agent/conf.d
$ sudo cp cacti.yaml.example cacti.yaml
$ sudo vi cacti.yaml
init_config:

instances:
  - mysql_host: 172.17.0.2  &lt;span class="c1"&gt;# 这里是容器的IP地址，可通过上面的命令获取&lt;/span&gt;
    mysql_user: oneapm
    mysql_password: oneapm
    rrd_path: /var/lib/cacti/rra
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;重启 Cloudinsight Agent&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo /etc/init.d/cloudinsight-agent restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;相关链接：
&lt;a href="https://github.com/QuantumObject/docker-cacti"&gt;https://github.com/QuantumObject/docker-cacti&lt;/a&gt;&lt;/p&gt;</summary><category term="Cloudinsight"></category><category term="Cacti"></category></entry><entry><title>Cloudinsight Agent 与 Nagios 集成</title><link href="http://startover.github.io/articles/2016/04/28/cloudinsight-nagios-integration/" rel="alternate"></link><published>2016-04-28T16:47:00+08:00</published><author><name>startover</name></author><id>tag:startover.github.io,2016-04-28:articles/2016/04/28/cloudinsight-nagios-integration/</id><summary type="html">&lt;h2&gt;原理介绍&lt;/h2&gt;
&lt;p&gt;同大多数 Nagios 的可视化系统一样，Cloudinsight Agent 依赖于 Nagios 输出的指标数据，也即需要启用 Nagios 的性能数据处理功能（在 nagios.cfg 文件中，设置process_performance_data=1即可）。&lt;/p&gt;
&lt;h2&gt;Nagios 安装配置&lt;/h2&gt;
&lt;p&gt;由于 Nagios 安装配置较为繁琐，这里通过 Docker 容器的方式来解决这个问题。&lt;/p&gt;
&lt;p&gt;然而，Cloudinsight Agent 需要读取 Nagios 的配置文件且依赖于 Nagios 输出的指标数据，所以我们需要将这部分文件挂载到系统主机上。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建 Nagios 配置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mkdir -p /usr/local/nagios/data
$ sudo mkdir -p /usr/local/nagios/etc
$ sudo wget -O /usr/local/nagios/etc/nagios.cfg https://raw.githubusercontent.com/startover/cloudinsight-docker-nagios/master/nagios.cfg
$ sudo vi /usr/local/nagios/etc/nagios.cfg
...
&lt;span class="c1"&gt;# 启用 Nagios 的性能数据处理功能&lt;/span&gt;
&lt;span class="nv"&gt;process_performance_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1

&lt;span class="nv"&gt;host_perfdata_command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;process-host-perfdata
&lt;span class="nv"&gt;service_perfdata_command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;process-service-perfdata

&lt;span class="nv"&gt;host_perfdata_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/nagios/data/host-perfdata
&lt;span class="nv"&gt;service_perfdata_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/nagios/data/service-perfdata

&lt;span class="nv"&gt;host_perfdata_file_template&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;HOSTPERFDATA&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="nv"&gt;$TIMET&lt;/span&gt;$&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="nv"&gt;$HOSTNAME&lt;/span&gt;$&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="nv"&gt;$HOSTEXECUTIONTIME&lt;/span&gt;$&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="nv"&gt;$HOSTOUTPUT&lt;/span&gt;$&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="nv"&gt;$HOSTPERFDATA&lt;/span&gt;$
&lt;span class="nv"&gt;service_perfdata_file_template&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;SERVICEPERFDATA&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="nv"&gt;$TIMET&lt;/span&gt;$&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="nv"&gt;$HOSTNAME&lt;/span&gt;$&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="nv"&gt;$SERVICEDESC&lt;/span&gt;$&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="nv"&gt;$SERVICEEXECUTIONTIME&lt;/span&gt;$&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="nv"&gt;$SERVICELATENCY&lt;/span&gt;$&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="nv"&gt;$SERVICEOUTPUT&lt;/span&gt;$&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="nv"&gt;$SERVICEPERFDATA&lt;/span&gt;$
...
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;挂载文件权限设置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于挂载文件默认是root用户访问权限，需将其赋予容器内的 nagios 用户，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo chown -R 999:999 /usr/local/nagios
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;运行 Nagios 容器&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run -d --name docker-nagios &lt;span class="se"&gt;\&lt;/span&gt;
             -h docker-nagios &lt;span class="se"&gt;\&lt;/span&gt;
             -p &lt;span class="m"&gt;25&lt;/span&gt; -p &lt;span class="m"&gt;80&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
             -v /usr/local/nagios/etc/nagios.cfg:/usr/local/nagios/etc/nagios.cfg &lt;span class="se"&gt;\&lt;/span&gt;
             -v /usr/local/nagios/data:/usr/local/nagios/data &lt;span class="se"&gt;\&lt;/span&gt;
             -v /etc/localtime:/etc/localtime:ro &lt;span class="se"&gt;\&lt;/span&gt;
             quantumobject/docker-nagios
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Cloudinsight Agent 集成&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://cloud.oneapm.com/#/settings"&gt;安装&lt;/a&gt; Cloudinsight Agent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置 Nagios 监控&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /etc/cloudinsight-agent/conf.d
$ sudo cp nagios.yaml.example nagios.yaml
$ sudo vi nagios.yaml
init_config:
  &lt;span class="c1"&gt;# check_freq: 30&lt;/span&gt;

instances:
  - nagios_conf: /usr/local/nagios/etc/nagios.cfg
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;重启 Cloudinsight Agent&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo /etc/init.d/cloudinsight-agent restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;关于 Nagios 的介绍和相关配置，请参考下面几篇文章：&lt;br /&gt;
&lt;a href="http://www.cnblogs.com/mchina/archive/2013/02/20/2883404.html"&gt;http://www.cnblogs.com/mchina/archive/2013/02/20/2883404.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.unixmen.com/install-configure-nagios-4-centos-7/"&gt;http://www.unixmen.com/install-configure-nagios-4-centos-7/&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://kura.io/2010/03/21/configuring-nagios-to-monitor-remote-load-disk-using-nrpe/"&gt;https://kura.io/2010/03/21/configuring-nagios-to-monitor-remote-load-disk-using-nrpe/&lt;/a&gt;&lt;/p&gt;</summary><category term="Cloudinsight"></category><category term="Nagios"></category></entry><entry><title>Python Flask vs Ruby Sinatra vs Go Martini vs Node Express</title><link href="http://startover.github.io/articles/2016/03/15/python-ruby-go-node-benchmark/" rel="alternate"></link><published>2016-03-15T14:21:00+08:00</published><author><name>startover</name></author><id>tag:startover.github.io,2016-03-15:articles/2016/03/15/python-ruby-go-node-benchmark/</id><summary type="html">&lt;p&gt;&lt;em&gt;题外话一&lt;/em&gt;：&lt;br /&gt;
最近一段时间，Cloudinsight接连发布了三种语言（Python, Node, Ruby）的SDK，Cloudinsight Agent也迎来了重大突破，发布了&lt;a href="http://www.oneapm.com/ci/windows.html"&gt;Windows监控&lt;/a&gt;第一个版本，总算可以松口气写点东西了...&lt;/p&gt;
&lt;p&gt;&lt;em&gt;题外话二&lt;/em&gt;：&lt;br /&gt;
偶然的机会看到一篇&lt;a href="https://realpython.com/blog/python/python-ruby-and-golang-a-web-Service-application-comparison/"&gt;blog&lt;/a&gt;，文中详细介绍了&lt;a href="https://github.com/mitsuhiko/flask"&gt;Flask&lt;/a&gt;(Python), &lt;a href="https://github.com/sinatra/sinatra"&gt;Sinatra&lt;/a&gt;(Ruby)以及&lt;a href="https://github.com/go-martini/martini"&gt;Matini&lt;/a&gt;(Golang)这三类微型框架的用法，并提供了各个框架在Docker下的部署方式。然而，美中不足的是没有提供各个框架的性能对比情况，经过一番搜罗，发现了一篇对现今主流框架做&lt;a href="https://medium.com/@tschundeee/express-vs-flask-vs-go-acc0879c2122#.vticwh9tn"&gt;性能对比的文章&lt;/a&gt;，找到两者的结合点，于是才有了今天这篇文章 :)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;
回归正题，之所以选择&lt;a href="https://github.com/mitsuhiko/flask"&gt;Flask&lt;/a&gt;(Python), &lt;a href="https://github.com/sinatra/sinatra"&gt;Sinatra&lt;/a&gt;(Ruby), &lt;a href="https://github.com/go-martini/martini"&gt;Matini&lt;/a&gt;(Golang)和&lt;a href="https://github.com/expressjs/express"&gt;Express&lt;/a&gt;(Node)，主要是经验所限以及个人比较喜欢这类微型框架，下面我们就对各个框架在同等条件下的性能表现一探究竟。&lt;/p&gt;
&lt;p&gt;本文源码地址：&lt;a href="https://github.com/startover/fibonacci-webapp-benchmark"&gt;https://github.com/startover/fibonacci-webapp-benchmark&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;环境准备：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4&gt;&lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;安装文档：&lt;a href="https://docs.docker.com/engine/installation/"&gt;https://docs.docker.com/engine/installation/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;&lt;a href="https://httpd.apache.org/docs/2.4/programs/ab.html"&gt;ab&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;CentOS/Redhat:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yum install httpd-tools&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Ubuntu/Debian:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;apt-get update &amp;amp;&amp;amp; apt-get install apache2-utils&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;启动容器&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone git@github.com:startover/fibonacci-webapp-benchmark.git
$ &lt;span class="nb"&gt;cd&lt;/span&gt; fibonacci-webapp-benchmark
$ ./docker-compose up -d
Recreating fibonacciwebappbenchmark_python_1...
Recreating fibonacciwebappbenchmark_go_1...
Recreating fibonacciwebappbenchmark_ruby_1...
Recreating fibonacciwebappbenchmark_node_1...
$ docker ps
CONTAINER ID        IMAGE                             COMMAND                  CREATED             STATUS              PORTS                    NAMES
14e0d2388dca        fibonacciwebappbenchmark_node     &lt;span class="s2"&gt;&amp;quot;npm start&amp;quot;&lt;/span&gt;              &lt;span class="m"&gt;6&lt;/span&gt; seconds ago       Up &lt;span class="m"&gt;5&lt;/span&gt; seconds        0.0.0.0:8080-&amp;gt;8080/tcp   fibonacciwebappbenchmark_node_1
8b1bdd070f83        fibonacciwebappbenchmark_ruby     &lt;span class="s2"&gt;&amp;quot;bundle exec ruby sin&amp;quot;&lt;/span&gt;   &lt;span class="m"&gt;23&lt;/span&gt; seconds ago      Up &lt;span class="m"&gt;22&lt;/span&gt; seconds       0.0.0.0:4567-&amp;gt;4567/tcp   fibonacciwebappbenchmark_ruby_1
333360123b56        fibonacciwebappbenchmark_go       &lt;span class="s2"&gt;&amp;quot;go run martini.go&amp;quot;&lt;/span&gt;      &lt;span class="m"&gt;34&lt;/span&gt; seconds ago      Up &lt;span class="m"&gt;32&lt;/span&gt; seconds       0.0.0.0:3000-&amp;gt;3000/tcp   fibonacciwebappbenchmark_go_1
df50829f511b        fibonacciwebappbenchmark_python   &lt;span class="s2"&gt;&amp;quot;python app.py&amp;quot;&lt;/span&gt;          &lt;span class="m"&gt;42&lt;/span&gt; seconds ago      Up &lt;span class="m"&gt;41&lt;/span&gt; seconds       0.0.0.0:5000-&amp;gt;5000/tcp   fibonacciwebappbenchmark_python_1
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;性能测试（请求数10w，并发100）&lt;/h2&gt;
&lt;h4&gt;Python + Flask&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ab -n &lt;span class="m"&gt;100000&lt;/span&gt; -c &lt;span class="m"&gt;100&lt;/span&gt; http://localhost:5000/10
...
Concurrency Level:      100
Time taken &lt;span class="k"&gt;for&lt;/span&gt; tests:   168.322 seconds
Complete requests:      100000
Failed requests:        0
Write errors:           0
Total transferred:      &lt;span class="m"&gt;18400000&lt;/span&gt; bytes
HTML transferred:       &lt;span class="m"&gt;2900000&lt;/span&gt; bytes
Requests per second:    594.10 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="c1"&gt;#/sec] (mean)&lt;/span&gt;
Time per request:       168.322 &lt;span class="o"&gt;[&lt;/span&gt;ms&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;mean&lt;span class="o"&gt;)&lt;/span&gt;
Time per request:       1.683 &lt;span class="o"&gt;[&lt;/span&gt;ms&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;mean, across all concurrent requests&lt;span class="o"&gt;)&lt;/span&gt;
Transfer rate:          106.75 &lt;span class="o"&gt;[&lt;/span&gt;Kbytes/sec&lt;span class="o"&gt;]&lt;/span&gt; received

Connection Times &lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;
              min  mean&lt;span class="o"&gt;[&lt;/span&gt;+/-sd&lt;span class="o"&gt;]&lt;/span&gt; median   max
Connect:        &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;   0.3      &lt;span class="m"&gt;0&lt;/span&gt;      12
Processing:    &lt;span class="m"&gt;21&lt;/span&gt;  &lt;span class="m"&gt;168&lt;/span&gt;  15.3    &lt;span class="m"&gt;166&lt;/span&gt;     295
Waiting:       &lt;span class="m"&gt;13&lt;/span&gt;  &lt;span class="m"&gt;167&lt;/span&gt;  15.1    &lt;span class="m"&gt;165&lt;/span&gt;     286
Total:         &lt;span class="m"&gt;26&lt;/span&gt;  &lt;span class="m"&gt;168&lt;/span&gt;  15.3    &lt;span class="m"&gt;166&lt;/span&gt;     295
...
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Ruby + Sinatra&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ab -n &lt;span class="m"&gt;100000&lt;/span&gt; -c &lt;span class="m"&gt;100&lt;/span&gt; http://localhost:4567/10
...
Concurrency Level:      100
Time taken &lt;span class="k"&gt;for&lt;/span&gt; tests:   496.401 seconds
Complete requests:      100000
Failed requests:        0
Write errors:           0
Total transferred:      &lt;span class="m"&gt;30700000&lt;/span&gt; bytes
HTML transferred:       &lt;span class="m"&gt;3000000&lt;/span&gt; bytes
Requests per second:    201.45 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="c1"&gt;#/sec] (mean)&lt;/span&gt;
Time per request:       496.401 &lt;span class="o"&gt;[&lt;/span&gt;ms&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;mean&lt;span class="o"&gt;)&lt;/span&gt;
Time per request:       4.964 &lt;span class="o"&gt;[&lt;/span&gt;ms&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;mean, across all concurrent requests&lt;span class="o"&gt;)&lt;/span&gt;
Transfer rate:          60.40 &lt;span class="o"&gt;[&lt;/span&gt;Kbytes/sec&lt;span class="o"&gt;]&lt;/span&gt; received

Connection Times &lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;
              min  mean&lt;span class="o"&gt;[&lt;/span&gt;+/-sd&lt;span class="o"&gt;]&lt;/span&gt; median   max
Connect:        &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;   0.3      &lt;span class="m"&gt;0&lt;/span&gt;      14
Processing:   &lt;span class="m"&gt;180&lt;/span&gt;  &lt;span class="m"&gt;493&lt;/span&gt; 522.3    &lt;span class="m"&gt;412&lt;/span&gt;   10507
Waiting:      &lt;span class="m"&gt;177&lt;/span&gt;  &lt;span class="m"&gt;485&lt;/span&gt; 521.7    &lt;span class="m"&gt;404&lt;/span&gt;   10505
Total:        &lt;span class="m"&gt;180&lt;/span&gt;  &lt;span class="m"&gt;493&lt;/span&gt; 522.3    &lt;span class="m"&gt;412&lt;/span&gt;   10507
...
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Go + Martini&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ab -n &lt;span class="m"&gt;100000&lt;/span&gt; -c &lt;span class="m"&gt;100&lt;/span&gt; http://localhost:3000/10
...
Concurrency Level:      100
Time taken &lt;span class="k"&gt;for&lt;/span&gt; tests:   48.284 seconds
Complete requests:      100000
Failed requests:        0
Write errors:           0
Total transferred:      &lt;span class="m"&gt;15700000&lt;/span&gt; bytes
HTML transferred:       &lt;span class="m"&gt;4100000&lt;/span&gt; bytes
Requests per second:    2071.08 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="c1"&gt;#/sec] (mean)&lt;/span&gt;
Time per request:       48.284 &lt;span class="o"&gt;[&lt;/span&gt;ms&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;mean&lt;span class="o"&gt;)&lt;/span&gt;
Time per request:       0.483 &lt;span class="o"&gt;[&lt;/span&gt;ms&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;mean, across all concurrent requests&lt;span class="o"&gt;)&lt;/span&gt;
Transfer rate:          317.54 &lt;span class="o"&gt;[&lt;/span&gt;Kbytes/sec&lt;span class="o"&gt;]&lt;/span&gt; received

Connection Times &lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;
              min  mean&lt;span class="o"&gt;[&lt;/span&gt;+/-sd&lt;span class="o"&gt;]&lt;/span&gt; median   max
Connect:        &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;1&lt;/span&gt;   0.7      &lt;span class="m"&gt;1&lt;/span&gt;      14
Processing:    &lt;span class="m"&gt;13&lt;/span&gt;   &lt;span class="m"&gt;47&lt;/span&gt;  12.0     &lt;span class="m"&gt;47&lt;/span&gt;     105
Waiting:        &lt;span class="m"&gt;3&lt;/span&gt;   &lt;span class="m"&gt;35&lt;/span&gt;  10.4     &lt;span class="m"&gt;34&lt;/span&gt;      99
Total:         &lt;span class="m"&gt;14&lt;/span&gt;   &lt;span class="m"&gt;48&lt;/span&gt;  12.0     &lt;span class="m"&gt;48&lt;/span&gt;     112
...
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Node + Express&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ab -n &lt;span class="m"&gt;100000&lt;/span&gt; -c &lt;span class="m"&gt;100&lt;/span&gt; http://localhost:8080/10
...
Concurrency Level:      100
Time taken &lt;span class="k"&gt;for&lt;/span&gt; tests:   59.962 seconds
Complete requests:      100000
Failed requests:        0
Write errors:           0
Total transferred:      &lt;span class="m"&gt;20700000&lt;/span&gt; bytes
HTML transferred:       &lt;span class="m"&gt;3000000&lt;/span&gt; bytes
Requests per second:    1667.72 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="c1"&gt;#/sec] (mean)&lt;/span&gt;
Time per request:       59.962 &lt;span class="o"&gt;[&lt;/span&gt;ms&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;mean&lt;span class="o"&gt;)&lt;/span&gt;
Time per request:       0.600 &lt;span class="o"&gt;[&lt;/span&gt;ms&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;mean, across all concurrent requests&lt;span class="o"&gt;)&lt;/span&gt;
Transfer rate:          337.13 &lt;span class="o"&gt;[&lt;/span&gt;Kbytes/sec&lt;span class="o"&gt;]&lt;/span&gt; received

Connection Times &lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;
              min  mean&lt;span class="o"&gt;[&lt;/span&gt;+/-sd&lt;span class="o"&gt;]&lt;/span&gt; median   max
Connect:        &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;   0.5      &lt;span class="m"&gt;0&lt;/span&gt;      20
Processing:    &lt;span class="m"&gt;26&lt;/span&gt;   &lt;span class="m"&gt;59&lt;/span&gt;  11.2     &lt;span class="m"&gt;59&lt;/span&gt;     168
Waiting:       &lt;span class="m"&gt;16&lt;/span&gt;   &lt;span class="m"&gt;56&lt;/span&gt;  10.8     &lt;span class="m"&gt;55&lt;/span&gt;     168
Total:         &lt;span class="m"&gt;26&lt;/span&gt;   &lt;span class="m"&gt;60&lt;/span&gt;  11.1     &lt;span class="m"&gt;59&lt;/span&gt;     171
...
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;总结：&lt;/h2&gt;
&lt;table class="table table-bordered"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Web framework&lt;/th&gt;
&lt;th align="center"&gt;avg&lt;/th&gt;
&lt;th align="center"&gt;min&lt;/th&gt;
&lt;th align="center"&gt;max&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Flask(Python)&lt;/td&gt;
&lt;td align="center"&gt;168ms&lt;/td&gt;
&lt;td align="center"&gt;26ms&lt;/td&gt;
&lt;td align="center"&gt;295ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sinatra(Ruby)&lt;/td&gt;
&lt;td align="center"&gt;496ms&lt;/td&gt;
&lt;td align="center"&gt;180ms&lt;/td&gt;
&lt;td align="center"&gt;10507ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Martini(Go)&lt;/td&gt;
&lt;td align="center"&gt;48ms&lt;/td&gt;
&lt;td align="center"&gt;14ms&lt;/td&gt;
&lt;td align="center"&gt;112ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Express(Node)&lt;/td&gt;
&lt;td align="center"&gt;60ms&lt;/td&gt;
&lt;td align="center"&gt;26ms&lt;/td&gt;
&lt;td align="center"&gt;171ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可见，&lt;a href="https://github.com/go-martini/martini"&gt;Matini&lt;/a&gt;(Golang)和&lt;a href="https://github.com/expressjs/express"&gt;Express&lt;/a&gt;(Node)性能优势比较明显，也在意料之中，&lt;a href="https://github.com/mitsuhiko/flask"&gt;Flask&lt;/a&gt;(Python)表现中规中矩，相较之下，&lt;a href="https://github.com/sinatra/sinatra"&gt;Sinatra&lt;/a&gt;(Ruby)的性能简直是没法忍（PS: 我不是Ruby黑）！感兴趣的亲们可以在自己的环境测试下。完。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;br /&gt;
&lt;a href="https://realpython.com/blog/python/python-ruby-and-golang-a-web-Service-application-comparison"&gt;https://realpython.com/blog/python/python-ruby-and-golang-a-web-Service-application-comparison/&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://medium.com/@tschundeee/express-vs-flask-vs-go-acc0879c2122#.6katm1qn2"&gt;https://medium.com/@tschundeee/express-vs-flask-vs-go-acc0879c2122#.6katm1qn2&lt;/a&gt;&lt;/p&gt;</summary><category term="Flask"></category><category term="Sinatra"></category><category term="Martini"></category><category term="Express"></category><category term="Performance"></category></entry><entry><title>【译】Python中如何创建mock？</title><link href="http://startover.github.io/articles/2015/06/06/python-mock-introduction/" rel="alternate"></link><published>2015-06-06T11:10:00+08:00</published><author><name>startover</name></author><id>tag:startover.github.io,2015-06-06:articles/2015/06/06/python-mock-introduction/</id><summary type="html">&lt;p&gt;原文地址：&lt;a href="http://engineroom.trackmaven.com/blog/making-a-mockery-of-python/"&gt;http://engineroom.trackmaven.com/blog/making-a-mockery-of-python/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今天我们来谈论下mock的使用。当然，请不要误会，这里的mock可不是嘲弄的意思。mock是一门技术，通过伪造部分实际代码，从而让我们能够验证剩余代码的正确性。现在我们将通过几个简单的示例演示mock在Python测试代码中的使用，以及这项极其有用的技术是如何帮助我们改善测试代码的。&lt;/p&gt;
&lt;h2&gt;为什么我们需要mock？&lt;/h2&gt;
&lt;p&gt;当我们进行单元测试的时候，我们的目标往往是为了测试非常小的代码块，例如一个独立存在的函数或类方法。换句话说，我们只需要针对那个函数内部的代码进行测试。如果测试代码依赖于其他的代码片段，即使被测试的函数没有变化，我们会发现在某种不幸的情形下，这部分内嵌代码的修改可能会破坏原有的测试。看看下面的例子，你将豁然开朗：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# function.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_and_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;addition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
    &lt;span class="n"&gt;multiple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

&lt;span class="c1"&gt;# test.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;function&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;add_and_multiply&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_add_and_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

        &lt;span class="n"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add_and_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;----------------------------------------------------------------------&lt;/span&gt;
&lt;span class="n"&gt;Ran&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;0.001&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;

&lt;span class="n"&gt;OK&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在上面的例子中，&lt;code&gt;add_and_multiply&lt;/code&gt;计算两个数的和与乘积并返回。&lt;code&gt;add_and_multiply&lt;/code&gt;调用了另一个函数&lt;code&gt;multiply&lt;/code&gt;进行乘积计算。&lt;/p&gt;
&lt;p&gt;假设我们想要摒弃“传统“的数学，并重新定义&lt;code&gt;multiply&lt;/code&gt;函数，在原有的乘积结果上加3。&lt;/p&gt;
&lt;p&gt;新的&lt;code&gt;multiply&lt;/code&gt;函数如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在我们遇到一个问题。我们的测试代码没有变化，我们想要测试的函数也没有变化，然而，&lt;code&gt;test_add_and_multiply&lt;/code&gt;却会执行失败：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="n"&gt;F&lt;/span&gt;
&lt;span class="o"&gt;======================================================================&lt;/span&gt;
&lt;span class="n"&gt;FAIL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;test_add_and_multiply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MyTestCase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;----------------------------------------------------------------------&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;test_add_and_multiply&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;

&lt;span class="o"&gt;----------------------------------------------------------------------&lt;/span&gt;
&lt;span class="n"&gt;Ran&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;0.001&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;

&lt;span class="n"&gt;FAILED&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;failures&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个问题之所以会发生，是因为我们的原始测试代码并非真正的单元测试。尽管我们想要测试的是外部函数，但我们隐性的将内部函数也包含进来，因为我们期望的结果是依赖于这个内部函数的行为的。虽然在上面简单的示例中呈现的差异显得毫无意义，但某些场景下，我们需要测试一个复杂的逻辑代码块 - 例如，一个Django视图函数基于某些特定条件调用各种不同的内部功能，从函数调用结果中分离出视图逻辑的测试就显得尤为重要了。&lt;/p&gt;
&lt;p&gt;解决这个问题有两种方案。我们要么忽略它，像集成测试那样去进行单元测试，要么求助于mock。第一种方案的缺点是，集成测试仅仅告诉我们函数调用时哪一行代码出问题了，这样更难找到问题根源所在。这并不是说，集成测试没有用处，因为在某些情况下它确实非常有用。不管怎样，单元测试和集成测试用于解决不同的问题，它们应该被同时使用。因此，如果我们想要成为一个好的测试人员，我们会选择另一种方案：mock。&lt;/p&gt;
&lt;h2&gt;mock是什么？&lt;/h2&gt;
&lt;p&gt;mock是一个极其优秀的Python包，Python 3已将其纳入标准库。对于我们这些还在UnicodeError遍布的Python 2.x中挣扎的苦逼码农，可以通过pip进行安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;mock有多种不同的用法。我们可以用它提供猴子补丁功能，创建伪造的对象，甚至可以作为一个上下文管理器。所有这些都是基于一个共同目标的，用副本替换部分代码来收集信息并返回伪造的响应。&lt;/p&gt;
&lt;p&gt;mock的&lt;a href="http://www.voidspace.org.uk/python/mock/"&gt;文档&lt;/a&gt;非常密集，寻找特定的用例信息可能会非常棘手。这里，我们就来看看一个常见的场景 - 替换一个内嵌函数并检查它的输入和输出。&lt;/p&gt;
&lt;h2&gt;开始mock之旅&lt;/h2&gt;
&lt;p&gt;让我们用mock来重新编写单元测试。接下来，我们将讨论发生了什么，以及为什么从测试的角度来看它是非常有用的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# test.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;function&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;add_and_multiply&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="nd"&gt;@mock.patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;function.multiply&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_add_and_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_multiply&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

        &lt;span class="n"&gt;mock_multiply&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;

        &lt;span class="n"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add_and_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;mock_multiply&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_once_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;至此，我们可以改变&lt;code&gt;multiply&lt;/code&gt;函数来做任何我们想做的 - 它可能返回加3后的乘积，返回None，或返回&lt;a href="https://www.youtube.com/watch?v=q-yxOFIkgxU&amp;amp;t=1m15s"&gt;favourite line from Monty Python and the Holy Grail&lt;/a&gt; - 你会发现，我们上面的测试仍然可以通过。这是因为我们mock了&lt;code&gt;multiply&lt;/code&gt;函数。在真正的单元测试场景下，我们并不关心&lt;code&gt;multiply&lt;/code&gt;函数内部发生了什么，从测试&lt;code&gt;add_and_multiply&lt;/code&gt;的角度来看，我们只关心&lt;code&gt;multiply&lt;/code&gt;被正确的参数调用了。这里我们假定有另一个单元测试会针对&lt;code&gt;multiply&lt;/code&gt;的内部逻辑进行测试。&lt;/p&gt;
&lt;h2&gt;刚才我们做了什么？&lt;/h2&gt;
&lt;p&gt;咋一看，上面的语法可能不好理解。让我们逐行分析：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@mock.patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;function.multiply&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_add_and_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_multiply&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们使用&lt;code&gt;mock.patch&lt;/code&gt;装饰器来用mock对象替换&lt;code&gt;multiply&lt;/code&gt;。然后，我们将它作为一个参数&lt;code&gt;mock_multiply&lt;/code&gt;插入到我们的测试代码中。在这个测试的上下文中，任何对&lt;code&gt;multiply&lt;/code&gt;的调用都会被重定向到&lt;code&gt;mock_multiply&lt;/code&gt;对象。&lt;/p&gt;
&lt;p&gt;有人会质疑 - “怎么能用对象替换函数！？“别担心！在Python的世界，函数也是对象。通常情况下，当我们调用&lt;code&gt;multiply()&lt;/code&gt;，我们实际执行的是&lt;code&gt;multiply&lt;/code&gt;函数的&lt;code&gt;__call__&lt;/code&gt;方法。然而，恰当的使用mock，对&lt;code&gt;multiply()&lt;/code&gt;的调用将执行我们的mock对象而不是&lt;code&gt;__call__&lt;/code&gt;方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mock_multiply&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为了使mock函数可以返回任何东西，我们需要定义其&lt;code&gt;return_value&lt;/code&gt;属性。实际上，当mock函数被调用时，它用于定义mock对象的返回值。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add_and_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mock_multiply&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_once_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在测试代码中，我们调用了外部函数&lt;code&gt;add_and_multiply&lt;/code&gt;。它会调用内嵌的&lt;code&gt;multiply&lt;/code&gt;函数，如果我们正确的进行了mock，调用将会被我们定义的mock对象取代。为了验证这一点，我们可以用到mock对象的高级特性 - 当它们被调用时，传给它们的任何参数将被储存起来。顾名思义，mock对象的&lt;code&gt;assert_called_once_with&lt;/code&gt;方法就是一个不错的捷径来验证某个对象是否被一组特定的参数调用过。如果被调用了，测试通过。反之，&lt;code&gt;assert_called_once_with&lt;/code&gt;会抛出&lt;code&gt;AssertionError&lt;/code&gt;的异常。&lt;/p&gt;
&lt;h2&gt;我们从中学到了什么？&lt;/h2&gt;
&lt;p&gt;好吧，我们遇到了很多实际问题。首先，我们通过mock将&lt;code&gt;multiply&lt;/code&gt;函数从&lt;code&gt;add_and_multiply&lt;/code&gt;中分离出来。这就意味着我们的单元测试只针对&lt;code&gt;add_and_multiply&lt;/code&gt;的内部逻辑。只有针对&lt;code&gt;add_and_multiply&lt;/code&gt;的代码修改将影响测试的成功与否。&lt;/p&gt;
&lt;p&gt;其次，我们现在可以控制内嵌函数的输出，以确保外部函数处理了不同的情况。例如，&lt;code&gt;add_and_multiply&lt;/code&gt;可能有逻辑条件依赖于&lt;code&gt;multiply&lt;/code&gt;的返回值：比如说，我们只想在乘积大于10的条件下返回一个值。通过人为设定&lt;code&gt;multiply&lt;/code&gt;的返回值，我们可以模拟乘积小于10的情况以及乘积大于10的情况，从而可以很容易测试我们的逻辑正确性。&lt;/p&gt;
&lt;p&gt;最后，我们现在可以验证被mock的函数被调用的次数，并传入了正确的参数。由于我们的mock对象取代了&lt;code&gt;multiply&lt;/code&gt;函数的位置，我们知道任何针对&lt;code&gt;multiply&lt;/code&gt;函数的调用都会被重定向到该mock对象。当测试一个复杂的功能时，确保每一步都被正确调用将是一件非常令人欣慰的事情。&lt;/p&gt;</summary><category term="Python"></category><category term="mock"></category></entry><entry><title>【译】提高Python运行效率的六个窍门</title><link href="http://startover.github.io/articles/2015/05/18/python-performance-tips/" rel="alternate"></link><published>2015-05-18T10:00:00+08:00</published><author><name>startover</name></author><id>tag:startover.github.io,2015-05-18:articles/2015/05/18/python-performance-tips/</id><summary type="html">&lt;p&gt;原文地址：&lt;a href="https://blog.newrelic.com/2015/01/21/python-performance-tips/"&gt;https://blog.newrelic.com/2015/01/21/python-performance-tips/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python是一门优秀的语言，它能让你在短时间内通过极少量代码就能完成许多操作。不仅如此，它还轻松支持多任务处理，比如多进程。&lt;/p&gt;
&lt;p&gt;不喜欢Python的人经常会吐嘈Python运行太慢。但是，事实并非如此。尝试以下六个窍门，来为你的Python应用提速。&lt;/p&gt;
&lt;h2&gt;窍门一：关键代码使用外部功能包&lt;/h2&gt;
&lt;p&gt;Python简化了许多编程任务，但是对于一些时间敏感的任务，它的表现经常不尽人意。使用C/C++或机器语言的外部功能包处理时间敏感任务，可以有效提高应用的运行效率。这些功能包往往依附于特定的平台，因此你要根据自己所用的平台选择合适的功能包。简而言之，这个窍门要你牺牲应用的可移植性以换取只有通过对底层主机的直接编程才能获得的运行效率。以下是一些你可以选择用来提升效率的功能包：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://cython.org/"&gt;Cython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pyinline.sourceforge.net/"&gt;Pylnlne&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pypy.org/"&gt;PyPy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/"&gt;Pyrex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些功能包的用处各有不同。比如说，使用C语言的数据类型，可以使涉及内存操作的任务更高效或者更直观。Pyrex就能帮助Python延展出这样的功能。Pylnline能使你在Python应用中直接使用C代码。内联代码是独立编译的，但是它把所有编译文件都保存在某处，并能充分利用C语言提供的高效率。&lt;/p&gt;
&lt;h2&gt;窍门二：在排序时使用键&lt;/h2&gt;
&lt;p&gt;Python含有许多古老的排序规则，这些规则在你创建定制的排序方法时会占用很多时间，而这些排序方法运行时也会拖延程序实际的运行速度。最佳的排序方法其实是尽可能多地使用键和内置的sort()方法。譬如，拿下面的代码来说：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt;
&lt;span class="n"&gt;somelist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;somelist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;somelist&lt;/span&gt;
&lt;span class="c1"&gt;#Output = [(1, 5, 8), (6, 2, 4), (9, 7, 5)]&lt;/span&gt;
&lt;span class="n"&gt;somelist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;somelist&lt;/span&gt;
&lt;span class="c1"&gt;#Output = [(6, 2, 4), (1, 5, 8), (9, 7, 5)]&lt;/span&gt;
&lt;span class="n"&gt;somelist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;somelist&lt;/span&gt;
&lt;span class="c1"&gt;#Output = [(6, 2, 4), (9, 7, 5), (1, 5, 8)],&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在每段例子里，list都是根据你选择的用作关键参数的索引进行排序的。这个方法不仅对数值类型有效，还同样适用于字符串类型。&lt;/p&gt;
&lt;h2&gt;窍门三：针对循环的优化&lt;/h2&gt;
&lt;p&gt;每一种编程语言都强调最优化的循环方案。当使用Python时，你可以借助丰富的技巧让循环程序跑得更快。然而，开发者们经常遗忘的一个技巧是：尽量避免在循环中访问变量的属性。譬如，拿下面的代码来说：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;lowerlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;this&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;is&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;lowercase&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;upper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;
&lt;span class="n"&gt;upperlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;append&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;upperlist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lowerlist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;upperlist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#Output = [&amp;#39;THIS&amp;#39;, &amp;#39;IS&amp;#39;, &amp;#39;LOWERCASE&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;每次你调用str.upper,  Python都会计算这个式子的值。然而，如果你把这个求值赋值给一个变量，那么求值的结果就能提前知道，Python程序就能运行得更快。因此，关键就是尽可能减小Python在循环中的工作量。因为Python解释执行的特性，在上面的例子中会大大减慢它的速度。&lt;/p&gt;
&lt;p&gt;（注意：优化循环的方法还有很多，这只是其中之一。比如，很多程序员会认为，列表推导式是提高循环速度的最佳方法。关键在于，优化循环方案是提高应用程序运行速度的上佳选择。）&lt;/p&gt;
&lt;h2&gt;窍门四：使用较新的Python版本&lt;/h2&gt;
&lt;p&gt;如果你在网上搜索Python，你会发现数不尽的信息都是关于如何升级Python版本。通常，每个版本的Python都会包含优化内容，使其运行速度优于之前的版本。但是，限制因素在于，你最喜欢的函数库有没有同步更新支持新的Python版本。与其争论函数库是否应该更新，关键在于新的Python版本是否足够高效来支持这一更新。&lt;/p&gt;
&lt;p&gt;你要保证自己的代码在新版本里还能运行。你需要使用新的函数库才能体验新的Python版本，然后你需要在做出关键性的改动时检查自己的应用。只有当你完成必要的修正之后，你才能体会新版本的不同。&lt;/p&gt;
&lt;p&gt;然而，如果你只是确保自己的应用在新版本中可以运行，你很可能会错过新版本提供的新特性。一旦你决定更新，请分析你的应用在新版本下的表现，并检查可能出问题的部分，然后优先针对这些部分应用新版本的特性。只有这样，用户才能在更新之初就觉察到应用性能的改观。&lt;/p&gt;
&lt;h2&gt;窍门五：尝试多种编码方法&lt;/h2&gt;
&lt;p&gt;每次创建应用时都使用同一种编码方法几乎无一例外会导致应用的运行效率不尽人意。可以在程序分析时尝试一些试验性的办法。譬如说，在处理字典中的数据项时，你既可以使用安全的方法，先确保数据项已经存在再进行更新，也可以直接对数据项进行更新，把不存在的数据项作为特例分开处理。请看下面第一段代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
&lt;span class="n"&gt;myDict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abcd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;myDict&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;myDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;myDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myDict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当一开始myDict为空时，这段代码会跑得比较快。然而，通常情况下，myDict填满了数据，至少填有大部分数据，这时换另一种方法会更有效率。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
&lt;span class="n"&gt;myDict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abcd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;myDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;myDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myDict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在两种方法中输出结果都是一样的。区别在于输出是如何获得的。跳出常规的思维模式，创建新的编程技巧能使你的应用更有效率。&lt;/p&gt;
&lt;h2&gt;窍门六：交叉编译你的应用&lt;/h2&gt;
&lt;p&gt;开发者有时会忘记计算机其实并不理解用来创建现代应用程序的编程语言。计算机理解的是机器语言。为了运行你的应用，你借助一个应用将你所编的人类可读的代码转换成机器可读的代码。有时，你用一种诸如Python这样的语言编写应用，再以C++这样的语言运行你的应用，这在运行的角度来说，是可行的。关键在于，你想你的应用完成什么事情，而你的主机系统能提供什么样的资源。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://nuitka.net/"&gt;Nuitka&lt;/a&gt;是一款有趣的交叉编译器，能将你的Python代码转化成C++代码。这样，你就可以在native模式下执行自己的应用，而无需依赖于解释器程序。你会发现自己的应用运行效率有了较大的提高，但是这会因平台和任务的差异而有所不同。&lt;/p&gt;
&lt;p&gt;（注意：Nuitka现在还处在测试阶段，所以在实际应用中请多加注意。实际上，当下最好还是把它用于实验。此外，关于交叉编译是否为提高运行效率的最佳方法还存在讨论的空间。开发者已经使用交叉编译多年，用来提高应用的速度。记住，每一种解决办法都有利有弊，在把它用于生产环境之前请仔细权衡。）&lt;/p&gt;
&lt;p&gt;在使用交叉编译器时，记得确保它支持你所用的Python版本。Nuitka支持Python2.6, 2.7, 3.2和3.3。为了让解决方案生效，你需要一个Python解释器和一个C++编译器。Nuitka支持许多C++编译器，其中包括&lt;a href="http://www.visualstudio.com/"&gt;Microsoft Visual Studio&lt;/a&gt;, &lt;a href="http://www.mingw.org/"&gt;MinGW&lt;/a&gt; 和 &lt;a href="http://clang.llvm.org/"&gt;Clang/LLVM&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;交叉编译可能造成一些严重问题。比如，在使用Nuitka时，你会发现即便是一个小程序也会消耗巨大的驱动空间。因为Nuitka借助一系列的动态链接库（DDLs）来执行Python的功能。因此，如果你用的是一个资源很有限的系统，这种方法或许不太可行。&lt;/p&gt;
&lt;h2&gt;结论&lt;/h2&gt;
&lt;p&gt;前文所述的六个窍门都能帮助你创建运行更有效率的Python应用。但是银弹是不存在的。上述的这些窍门不一定每次都能奏效。在特定的Python的版本下，有的窍门或许比其他的表现更好，但这有时候甚至取决于平台的差异。你需要总结分析你的应用，找到它效率低下的部分，然后尝试这些窍门，找到解决问题的最佳方法。&lt;/p&gt;</summary><category term="Python"></category><category term="Performance"></category></entry><entry><title>Python - 装饰器使用过程中的误区</title><link href="http://startover.github.io/articles/2015/04/27/python-decorator-mistake/" rel="alternate"></link><published>2015-04-27T14:07:00+08:00</published><author><name>startover</name></author><id>tag:startover.github.io,2015-04-27:articles/2015/04/27/python-decorator-mistake/</id><summary type="html">&lt;h2&gt;&lt;strong&gt;装饰器基本概念&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;大家都知道装饰器是一个很著名的设计模式，经常被用于AOP(面向切面编程)的场景，较为经典的有插入日志，性能测试，事务处理，Web权限校验，Cache等。&lt;/p&gt;
&lt;p&gt;Python语言本身提供了装饰器语法（@），典型的装饰器实现如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@function_wrapper&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;@实际上是python2.4才提出的语法糖，针对python2.4以前的版本有另一种等价的实现：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;strong&gt;装饰器的两种实现&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;函数包装器 - 经典实现&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@function_wrapper&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;类包装器 - 更易于理解&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;function_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@function_wrapper&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;strong&gt;函数（function）自省&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;当我们谈到一个函数时，通常希望这个函数的属性像其文档上描述的那样，是被明确定义的，例如&lt;code&gt;__name__&lt;/code&gt;和&lt;code&gt;__doc__&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;针对某个函数应用装饰器时，这个函数的属性就会发生变化，但这并不是我们所期望的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@function_wrapper&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;_wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;python标准库提供了&lt;code&gt;functools.wraps()&lt;/code&gt;，来解决这个问题。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@functools.wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@function_wrapper&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;function&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然而，当我们想要获取被包装函数的参数（&lt;code&gt;argument&lt;/code&gt;）或源代码（&lt;code&gt;source code&lt;/code&gt;）时，同样不能得到我们想要的结果。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="nd"&gt;@function_wrapper&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getargspec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;ArgSpec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="n"&gt;varargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;args&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kwargs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nd"&gt;@functools.wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;strong&gt;包装类方法（&lt;code&gt;@classmethod&lt;/code&gt;）&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;当包装器（&lt;code&gt;@function_wrapper&lt;/code&gt;）被应用于&lt;code&gt;@classmethod&lt;/code&gt;时，将会抛出如下异常：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@function_wrapper&lt;/span&gt;
    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cmethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.../functools.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;update_wrapper&lt;/span&gt;
    &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;classmethod&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__module__&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因为&lt;code&gt;@classmethod&lt;/code&gt;在实现时，缺少&lt;code&gt;functools.update_wrapper&lt;/code&gt;需要的某些属性。这是&lt;code&gt;functools.update_wrapper&lt;/code&gt;在python2中的bug，3.2版本已被修复，参考&lt;a href="http://bugs.python.org/issue3445"&gt;http://bugs.python.org/issue3445&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;然而，在python3下执行，另一个问题出现了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@function_wrapper&lt;/span&gt;
    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cmethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmethod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;classmethod.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmethod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;classmethod.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_wrapper&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;classmethod&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;callable&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是因为包装器认定被包装的函数（&lt;code&gt;@classmethod&lt;/code&gt;）是可以直接被调用的，但事实并不一定是这样的。被包装的函数实际上可能是描述符（&lt;code&gt;descriptor&lt;/code&gt;），意味着为了使其可调用，该函数（描述符）必须被正确地绑定到某个实例上。关于描述符的定义，可以参考&lt;a href="https://docs.python.org/2/howto/descriptor.html"&gt;https://docs.python.org/2/howto/descriptor.html&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;总结 - 简单并不意味着正确&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;尽管大家实现装饰器所用的方法通常都很简单，但这并不意味着它们一定是正确的并且始终能正常工作。&lt;/p&gt;
&lt;p&gt;如同上面我们所看到的，&lt;code&gt;functools.wraps()&lt;/code&gt;可以帮我们解决&lt;code&gt;__name__&lt;/code&gt;和&lt;code&gt;__doc__&lt;/code&gt; 的问题，但对于获取函数的参数（&lt;code&gt;argument&lt;/code&gt;）或源代码（&lt;code&gt;source code&lt;/code&gt;）则束手无策。&lt;/p&gt;
&lt;p&gt;以上问题，&lt;a href="https://github.com/GrahamDumpleton/wrapt"&gt;wrapt&lt;/a&gt;都可以帮忙解决，详细用法可参考其官方文档：&lt;a href="http://wrapt.readthedocs.org"&gt;http://wrapt.readthedocs.org&lt;/a&gt;&lt;/p&gt;</summary><category term="Python"></category><category term="装饰器"></category></entry></feed>